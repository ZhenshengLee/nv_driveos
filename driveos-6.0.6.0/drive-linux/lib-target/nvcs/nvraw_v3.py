# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


# Copyright (c) 2017-2022, NVIDIA Corporation.  All rights reserved.
#
# NVIDIA Corporation and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA Corporation is strictly prohibited.
#



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _nvraw_v3
else:
    import _nvraw_v3

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nvraw_v3.delete_SwigPyIterator

    def value(self):
        return _nvraw_v3.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _nvraw_v3.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _nvraw_v3.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _nvraw_v3.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _nvraw_v3.SwigPyIterator_equal(self, x)

    def copy(self):
        return _nvraw_v3.SwigPyIterator_copy(self)

    def next(self):
        return _nvraw_v3.SwigPyIterator_next(self)

    def __next__(self):
        return _nvraw_v3.SwigPyIterator___next__(self)

    def previous(self):
        return _nvraw_v3.SwigPyIterator_previous(self)

    def advance(self, n):
        return _nvraw_v3.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _nvraw_v3.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _nvraw_v3.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _nvraw_v3.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _nvraw_v3.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _nvraw_v3.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _nvraw_v3.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _nvraw_v3:
_nvraw_v3.SwigPyIterator_swigregister(SwigPyIterator)

NVRAW_MAJOR_VERSION = _nvraw_v3.NVRAW_MAJOR_VERSION
NVRAW_MINOR_VERSION = _nvraw_v3.NVRAW_MINOR_VERSION
NVRAW_PATCH_VERSION = _nvraw_v3.NVRAW_PATCH_VERSION
APERTURE_MOTOR_STATUS_UNKNOWN = _nvraw_v3.APERTURE_MOTOR_STATUS_UNKNOWN
APERTURE_MOTOR_STATUS_IDLE = _nvraw_v3.APERTURE_MOTOR_STATUS_IDLE
APERTURE_MOTOR_STATUS_MOVING = _nvraw_v3.APERTURE_MOTOR_STATUS_MOVING
APERTURE_MOTOR_STATUS_LAST = _nvraw_v3.APERTURE_MOTOR_STATUS_LAST
APERTURE_MOTOR_STATUS_FORCE32 = _nvraw_v3.APERTURE_MOTOR_STATUS_FORCE32
AE_STATE_UNKNOWN = _nvraw_v3.AE_STATE_UNKNOWN
AE_STATE_INACTIVE = _nvraw_v3.AE_STATE_INACTIVE
AE_STATE_SEARCHING = _nvraw_v3.AE_STATE_SEARCHING
AE_STATE_CONVERGED = _nvraw_v3.AE_STATE_CONVERGED
AE_STATE_FLASH_REQUIRED = _nvraw_v3.AE_STATE_FLASH_REQUIRED
AE_STATE_LOCKED = _nvraw_v3.AE_STATE_LOCKED
AE_STATE_LAST = _nvraw_v3.AE_STATE_LAST
AE_STATE_FORCE32 = _nvraw_v3.AE_STATE_FORCE32
AWB_STATE_UNKNOWN = _nvraw_v3.AWB_STATE_UNKNOWN
AWB_STATE_INACTIVE = _nvraw_v3.AWB_STATE_INACTIVE
AWB_STATE_SEARCHING = _nvraw_v3.AWB_STATE_SEARCHING
AWB_STATE_CONVERGED = _nvraw_v3.AWB_STATE_CONVERGED
AWB_STATE_LOCKED = _nvraw_v3.AWB_STATE_LOCKED
AWB_STATE_LAST = _nvraw_v3.AWB_STATE_LAST
AWB_STATE_FORCE32 = _nvraw_v3.AWB_STATE_FORCE32
EMBEDDED_DATA_LAYOUT_UNKNOWN = _nvraw_v3.EMBEDDED_DATA_LAYOUT_UNKNOWN
EMBEDDED_DATA_LAYOUT_NOT_FOUND = _nvraw_v3.EMBEDDED_DATA_LAYOUT_NOT_FOUND
EMBEDDED_DATA_LAYOUT_STRIPPED = _nvraw_v3.EMBEDDED_DATA_LAYOUT_STRIPPED
EMBEDDED_DATA_LAYOUT_T_D_B = _nvraw_v3.EMBEDDED_DATA_LAYOUT_T_D_B
EMBEDDED_DATA_LAYOUT_T_B_D = _nvraw_v3.EMBEDDED_DATA_LAYOUT_T_B_D
EMBEDDED_DATA_LAYOUT_T_D = _nvraw_v3.EMBEDDED_DATA_LAYOUT_T_D
EMBEDDED_DATA_LAYOUT_D_B = _nvraw_v3.EMBEDDED_DATA_LAYOUT_D_B
EMBEDDED_DATA_LAYOUT_LAST = _nvraw_v3.EMBEDDED_DATA_LAYOUT_LAST
EMBEDDED_DATA_LAYOUT_FORCE32 = _nvraw_v3.EMBEDDED_DATA_LAYOUT_FORCE32
EMBEDDED_DATA_TYPE_UNKNOWN = _nvraw_v3.EMBEDDED_DATA_TYPE_UNKNOWN
EMBEDDED_DATA_TYPE_TOP = _nvraw_v3.EMBEDDED_DATA_TYPE_TOP
EMBEDDED_DATA_TYPE_BOTTOM = _nvraw_v3.EMBEDDED_DATA_TYPE_BOTTOM
EMBEDDED_DATA_TYPE_LAST = _nvraw_v3.EMBEDDED_DATA_TYPE_LAST
EMBEDDED_DATA_TYPE_FORCE32 = _nvraw_v3.EMBEDDED_DATA_TYPE_FORCE32
BAYER_PHASE_UNKNOWN = _nvraw_v3.BAYER_PHASE_UNKNOWN
BAYER_PHASE_RGGB = _nvraw_v3.BAYER_PHASE_RGGB
BAYER_PHASE_BGGR = _nvraw_v3.BAYER_PHASE_BGGR
BAYER_PHASE_GRBG = _nvraw_v3.BAYER_PHASE_GRBG
BAYER_PHASE_GBRG = _nvraw_v3.BAYER_PHASE_GBRG
BAYER_PHASE_YUV = _nvraw_v3.BAYER_PHASE_YUV
BAYER_PHASE_RCCB = _nvraw_v3.BAYER_PHASE_RCCB
BAYER_PHASE_BCCR = _nvraw_v3.BAYER_PHASE_BCCR
BAYER_PHASE_CBRC = _nvraw_v3.BAYER_PHASE_CBRC
BAYER_PHASE_CRBC = _nvraw_v3.BAYER_PHASE_CRBC
BAYER_PHASE_RCCC = _nvraw_v3.BAYER_PHASE_RCCC
BAYER_PHASE_CCCR = _nvraw_v3.BAYER_PHASE_CCCR
BAYER_PHASE_CRCC = _nvraw_v3.BAYER_PHASE_CRCC
BAYER_PHASE_CCRC = _nvraw_v3.BAYER_PHASE_CCRC
BAYER_PHASE_BGGI_RGGI = _nvraw_v3.BAYER_PHASE_BGGI_RGGI
BAYER_PHASE_GBIG_GRIG = _nvraw_v3.BAYER_PHASE_GBIG_GRIG
BAYER_PHASE_GIBG_GIRG = _nvraw_v3.BAYER_PHASE_GIBG_GIRG
BAYER_PHASE_IGGB_IGGR = _nvraw_v3.BAYER_PHASE_IGGB_IGGR
BAYER_PHASE_RGGI_BGGI = _nvraw_v3.BAYER_PHASE_RGGI_BGGI
BAYER_PHASE_GRIG_GBIG = _nvraw_v3.BAYER_PHASE_GRIG_GBIG
BAYER_PHASE_GIRG_GIBG = _nvraw_v3.BAYER_PHASE_GIRG_GIBG
BAYER_PHASE_IGGR_IGGB = _nvraw_v3.BAYER_PHASE_IGGR_IGGB
BAYER_PHASE_LAST = _nvraw_v3.BAYER_PHASE_LAST
BAYER_PHASE_FORCE32 = _nvraw_v3.BAYER_PHASE_FORCE32
SENSOR_MODE_TYPE_UNKNOWN = _nvraw_v3.SENSOR_MODE_TYPE_UNKNOWN
SENSOR_MODE_TYPE_DEPTH = _nvraw_v3.SENSOR_MODE_TYPE_DEPTH
SENSOR_MODE_TYPE_YUV = _nvraw_v3.SENSOR_MODE_TYPE_YUV
SENSOR_MODE_TYPE_RGB = _nvraw_v3.SENSOR_MODE_TYPE_RGB
SENSOR_MODE_TYPE_BAYER = _nvraw_v3.SENSOR_MODE_TYPE_BAYER
SENSOR_MODE_TYPE_WDR_PWL = _nvraw_v3.SENSOR_MODE_TYPE_WDR_PWL
SENSOR_MODE_TYPE_WDR_DOL = _nvraw_v3.SENSOR_MODE_TYPE_WDR_DOL
SENSOR_MODE_TYPE_WDR_INTERLEAVE = _nvraw_v3.SENSOR_MODE_TYPE_WDR_INTERLEAVE
SENSOR_MODE_TYPE_LAST = _nvraw_v3.SENSOR_MODE_TYPE_LAST
SENSOR_MODE_TYPE_FORCE32 = _nvraw_v3.SENSOR_MODE_TYPE_FORCE32
PIXEL_FORMAT_UNKNOWN = _nvraw_v3.PIXEL_FORMAT_UNKNOWN
PIXEL_FORMAT_INT16 = _nvraw_v3.PIXEL_FORMAT_INT16
PIXEL_FORMAT_S114 = _nvraw_v3.PIXEL_FORMAT_S114
PIXEL_FORMAT_IEEE_FP16 = _nvraw_v3.PIXEL_FORMAT_IEEE_FP16
PIXEL_FORMAT_ISP_FP16 = _nvraw_v3.PIXEL_FORMAT_ISP_FP16
PIXEL_FORMAT_U16 = _nvraw_v3.PIXEL_FORMAT_U16
PIXEL_FORMAT_LAST = _nvraw_v3.PIXEL_FORMAT_LAST
PIXEL_FORMAT_FORCE32 = _nvraw_v3.PIXEL_FORMAT_FORCE32
DYNAMIC_RANGE_METADATA_TYPE_UNKNOWN = _nvraw_v3.DYNAMIC_RANGE_METADATA_TYPE_UNKNOWN
DYNAMIC_RANGE_METADATA_TYPE_DISABLED = _nvraw_v3.DYNAMIC_RANGE_METADATA_TYPE_DISABLED
DYNAMIC_RANGE_METADATA_TYPE_HDR = _nvraw_v3.DYNAMIC_RANGE_METADATA_TYPE_HDR
DYNAMIC_RANGE_METADATA_TYPE_WDR_DOL = _nvraw_v3.DYNAMIC_RANGE_METADATA_TYPE_WDR_DOL
DYNAMIC_RANGE_METADATA_TYPE_LAST = _nvraw_v3.DYNAMIC_RANGE_METADATA_TYPE_LAST
DYNAMIC_RANGE_METADATA_TYPE_FORCE32 = _nvraw_v3.DYNAMIC_RANGE_METADATA_TYPE_FORCE32
NVRAW_MODE_READ = _nvraw_v3.NVRAW_MODE_READ
NVRAW_MODE_WRITE = _nvraw_v3.NVRAW_MODE_WRITE
NVRAW_MODE_LAST = _nvraw_v3.NVRAW_MODE_LAST
NVRAW_MODE_FORCE32 = _nvraw_v3.NVRAW_MODE_FORCE32
NVRAW_IO_MODE_FILE_IO = _nvraw_v3.NVRAW_IO_MODE_FILE_IO
NVRAW_IO_MODE_MMAPED_IO = _nvraw_v3.NVRAW_IO_MODE_MMAPED_IO
NVRAW_IO_MODE_LAST = _nvraw_v3.NVRAW_IO_MODE_LAST
NVRAW_IO_MODE_FORCE32 = _nvraw_v3.NVRAW_IO_MODE_FORCE32
class PointFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_nvraw_v3.PointFloat_x_get, _nvraw_v3.PointFloat_x_set)
    y = property(_nvraw_v3.PointFloat_y_get, _nvraw_v3.PointFloat_y_set)

    def __init__(self):
        _nvraw_v3.PointFloat_swiginit(self, _nvraw_v3.new_PointFloat())
    __swig_destroy__ = _nvraw_v3.delete_PointFloat

# Register PointFloat in _nvraw_v3:
_nvraw_v3.PointFloat_swigregister(PointFloat)
cvar = _nvraw_v3.cvar
TIMEOUT_INFINITE = cvar.TIMEOUT_INFINITE
UINT32T_MAX = cvar.UINT32T_MAX
UINT64T_MAX = cvar.UINT64T_MAX

class Version(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    major = property(_nvraw_v3.Version_major_get, _nvraw_v3.Version_major_set)
    minor = property(_nvraw_v3.Version_minor_get, _nvraw_v3.Version_minor_set)
    patch = property(_nvraw_v3.Version_patch_get, _nvraw_v3.Version_patch_set)

    def __init__(self, _major, _minor, _patch):
        _nvraw_v3.Version_swiginit(self, _nvraw_v3.new_Version(_major, _minor, _patch))

    def getVersionString(self):
        return _nvraw_v3.Version_getVersionString(self)

    def isCompatible(self, version):
        return _nvraw_v3.Version_isCompatible(self, version)
    __swig_destroy__ = _nvraw_v3.delete_Version

# Register Version in _nvraw_v3:
_nvraw_v3.Version_swigregister(Version)

class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    value = property(_nvraw_v3.Time_value_get, _nvraw_v3.Time_value_set)

    def __init__(self, *args):
        _nvraw_v3.Time_swiginit(self, _nvraw_v3.new_Time(*args))

    def getSeconds(self):
        return _nvraw_v3.Time_getSeconds(self)

    def getMicroseconds(self):
        return _nvraw_v3.Time_getMicroseconds(self)

    def setSeconds(self, seconds):
        return _nvraw_v3.Time_setSeconds(self, seconds)

    def setMicroseconds(self, us):
        return _nvraw_v3.Time_setMicroseconds(self, us)

    def getTimeString(self):
        return _nvraw_v3.Time_getTimeString(self)

    def __eq__(self, other):
        return _nvraw_v3.Time___eq__(self, other)
    __swig_destroy__ = _nvraw_v3.delete_Time

# Register Time in _nvraw_v3:
_nvraw_v3.Time_swigregister(Time)

class NonCopyable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _nvraw_v3.delete_NonCopyable

# Register NonCopyable in _nvraw_v3:
_nvraw_v3.NonCopyable_swigregister(NonCopyable)

class Interface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

# Register Interface in _nvraw_v3:
_nvraw_v3.Interface_swigregister(Interface)

class InterfaceID(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nvraw_v3.InterfaceID_swiginit(self, _nvraw_v3.new_InterfaceID(*args))
    __swig_destroy__ = _nvraw_v3.delete_InterfaceID

# Register InterfaceID in _nvraw_v3:
_nvraw_v3.InterfaceID_swigregister(InterfaceID)

class InterfaceProvider(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getInterface(self, interfaceId):
        return _nvraw_v3.InterfaceProvider_getInterface(self, interfaceId)

# Register InterfaceProvider in _nvraw_v3:
_nvraw_v3.InterfaceProvider_swigregister(InterfaceProvider)

class Destructable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def destroy(self):
        return _nvraw_v3.Destructable_destroy(self)

# Register Destructable in _nvraw_v3:
_nvraw_v3.Destructable_swigregister(Destructable)

DEFAULT_INITIAL_ALLOC = _nvraw_v3.DEFAULT_INITIAL_ALLOC
DEFAULT_GROWTH_INCREMENT = _nvraw_v3.DEFAULT_GROWTH_INCREMENT

def SWIG_init():
    return _nvraw_v3.SWIG_init()

def cdata(ptr, nbytes):
    return _nvraw_v3.cdata(ptr, nbytes)
NvError_Success = _nvraw_v3.NvError_Success
NvError_NotImplemented = _nvraw_v3.NvError_NotImplemented
NvError_NotSupported = _nvraw_v3.NvError_NotSupported
NvError_NotInitialized = _nvraw_v3.NvError_NotInitialized
NvError_BadParameter = _nvraw_v3.NvError_BadParameter
NvError_Timeout = _nvraw_v3.NvError_Timeout
NvError_InsufficientMemory = _nvraw_v3.NvError_InsufficientMemory
NvError_ReadOnlyAttribute = _nvraw_v3.NvError_ReadOnlyAttribute
NvError_InvalidState = _nvraw_v3.NvError_InvalidState
NvError_InvalidAddress = _nvraw_v3.NvError_InvalidAddress
NvError_InvalidSize = _nvraw_v3.NvError_InvalidSize
NvError_BadValue = _nvraw_v3.NvError_BadValue
NvError_AlreadyAllocated = _nvraw_v3.NvError_AlreadyAllocated
NvError_Busy = _nvraw_v3.NvError_Busy
NvError_ModuleNotPresent = _nvraw_v3.NvError_ModuleNotPresent
NvError_ResourceError = _nvraw_v3.NvError_ResourceError
NvError_CountMismatch = _nvraw_v3.NvError_CountMismatch
NvError_InsufficientVideoMemory = _nvraw_v3.NvError_InsufficientVideoMemory
NvError_BadSurfaceColorScheme = _nvraw_v3.NvError_BadSurfaceColorScheme
NvError_InvalidSurface = _nvraw_v3.NvError_InvalidSurface
NvError_SurfaceNotSupported = _nvraw_v3.NvError_SurfaceNotSupported
NvError_DispInitFailed = _nvraw_v3.NvError_DispInitFailed
NvError_DispAlreadyAttached = _nvraw_v3.NvError_DispAlreadyAttached
NvError_DispTooManyDisplays = _nvraw_v3.NvError_DispTooManyDisplays
NvError_DispNoDisplaysAttached = _nvraw_v3.NvError_DispNoDisplaysAttached
NvError_DispModeNotSupported = _nvraw_v3.NvError_DispModeNotSupported
NvError_DispNotFound = _nvraw_v3.NvError_DispNotFound
NvError_DispAttachDissallowed = _nvraw_v3.NvError_DispAttachDissallowed
NvError_DispTypeNotSupported = _nvraw_v3.NvError_DispTypeNotSupported
NvError_DispAuthenticationFailed = _nvraw_v3.NvError_DispAuthenticationFailed
NvError_DispNotAttached = _nvraw_v3.NvError_DispNotAttached
NvError_DispSamePwrState = _nvraw_v3.NvError_DispSamePwrState
NvError_DispEdidFailure = _nvraw_v3.NvError_DispEdidFailure
NvError_DispDsiReadAckError = _nvraw_v3.NvError_DispDsiReadAckError
NvError_DispDsiReadInvalidResp = _nvraw_v3.NvError_DispDsiReadInvalidResp
NvError_FileWriteFailed = _nvraw_v3.NvError_FileWriteFailed
NvError_FileReadFailed = _nvraw_v3.NvError_FileReadFailed
NvError_EndOfFile = _nvraw_v3.NvError_EndOfFile
NvError_FileOperationFailed = _nvraw_v3.NvError_FileOperationFailed
NvError_DirOperationFailed = _nvraw_v3.NvError_DirOperationFailed
NvError_EndOfDirList = _nvraw_v3.NvError_EndOfDirList
NvError_ConfigVarNotFound = _nvraw_v3.NvError_ConfigVarNotFound
NvError_InvalidConfigVar = _nvraw_v3.NvError_InvalidConfigVar
NvError_LibraryNotFound = _nvraw_v3.NvError_LibraryNotFound
NvError_SymbolNotFound = _nvraw_v3.NvError_SymbolNotFound
NvError_MemoryMapFailed = _nvraw_v3.NvError_MemoryMapFailed
NvError_IoctlFailed = _nvraw_v3.NvError_IoctlFailed
NvError_AccessDenied = _nvraw_v3.NvError_AccessDenied
NvError_DeviceNotFound = _nvraw_v3.NvError_DeviceNotFound
NvError_KernelDriverNotFound = _nvraw_v3.NvError_KernelDriverNotFound
NvError_FileNotFound = _nvraw_v3.NvError_FileNotFound
NvError_SpiReceiveError = _nvraw_v3.NvError_SpiReceiveError
NvError_SpiTransmitError = _nvraw_v3.NvError_SpiTransmitError
NvError_HsmmcCardNotPresent = _nvraw_v3.NvError_HsmmcCardNotPresent
NvError_HsmmcControllerBusy = _nvraw_v3.NvError_HsmmcControllerBusy
NvError_HsmmcAutoDetectCard = _nvraw_v3.NvError_HsmmcAutoDetectCard
NvError_SdioCardNotPresent = _nvraw_v3.NvError_SdioCardNotPresent
NvError_SdioInstanceTaken = _nvraw_v3.NvError_SdioInstanceTaken
NvError_SdioControllerBusy = _nvraw_v3.NvError_SdioControllerBusy
NvError_SdioReadFailed = _nvraw_v3.NvError_SdioReadFailed
NvError_SdioWriteFailed = _nvraw_v3.NvError_SdioWriteFailed
NvError_SdioBadBlockSize = _nvraw_v3.NvError_SdioBadBlockSize
NvError_SdioClockNotConfigured = _nvraw_v3.NvError_SdioClockNotConfigured
NvError_SdioSdhcPatternIntegrityFailed = _nvraw_v3.NvError_SdioSdhcPatternIntegrityFailed
NvError_SdioCommandFailed = _nvraw_v3.NvError_SdioCommandFailed
NvError_SdioCardAlwaysPresent = _nvraw_v3.NvError_SdioCardAlwaysPresent
NvError_SdioAutoDetectCard = _nvraw_v3.NvError_SdioAutoDetectCard
NvError_UsbInvalidEndpoint = _nvraw_v3.NvError_UsbInvalidEndpoint
NvError_UsbfTxfrActive = _nvraw_v3.NvError_UsbfTxfrActive
NvError_UsbfTxfrComplete = _nvraw_v3.NvError_UsbfTxfrComplete
NvError_UsbfTxfrFail = _nvraw_v3.NvError_UsbfTxfrFail
NvError_UsbfEpStalled = _nvraw_v3.NvError_UsbfEpStalled
NvError_UsbfCableDisConnected = _nvraw_v3.NvError_UsbfCableDisConnected
NvError_UartOverrun = _nvraw_v3.NvError_UartOverrun
NvError_UartFraming = _nvraw_v3.NvError_UartFraming
NvError_UartParity = _nvraw_v3.NvError_UartParity
NvError_UartBreakReceived = _nvraw_v3.NvError_UartBreakReceived
NvError_I2cReadFailed = _nvraw_v3.NvError_I2cReadFailed
NvError_I2cWriteFailed = _nvraw_v3.NvError_I2cWriteFailed
NvError_I2cDeviceNotFound = _nvraw_v3.NvError_I2cDeviceNotFound
NvError_I2cInternalError = _nvraw_v3.NvError_I2cInternalError
NvError_I2cArbitrationFailed = _nvraw_v3.NvError_I2cArbitrationFailed
NvError_IdeHwError = _nvraw_v3.NvError_IdeHwError
NvError_IdeReadError = _nvraw_v3.NvError_IdeReadError
NvError_IdeWriteError = _nvraw_v3.NvError_IdeWriteError
NvError_OwrReadFailed = _nvraw_v3.NvError_OwrReadFailed
NvError_OwrWriteFailed = _nvraw_v3.NvError_OwrWriteFailed
NvError_OwrBitTransferFailed = _nvraw_v3.NvError_OwrBitTransferFailed
NvError_OwrInvalidOffset = _nvraw_v3.NvError_OwrInvalidOffset
NvError_InvalidOperation = _nvraw_v3.NvError_InvalidOperation
NvError_RmInitFailed = _nvraw_v3.NvError_RmInitFailed
NvError_RmChannelInitFailure = _nvraw_v3.NvError_RmChannelInitFailure
NvError_RmStreamInitFailure = _nvraw_v3.NvError_RmStreamInitFailure
NvError_RmSyncPointAllocFailure = _nvraw_v3.NvError_RmSyncPointAllocFailure
NvError_ResourceAlreadyInUse = _nvraw_v3.NvError_ResourceAlreadyInUse
NvError_DmaBusy = _nvraw_v3.NvError_DmaBusy
NvError_InvalidSourceId = _nvraw_v3.NvError_InvalidSourceId
NvError_DmaChannelNotAvailable = _nvraw_v3.NvError_DmaChannelNotAvailable
NvError_NoConnectedImager = _nvraw_v3.NvError_NoConnectedImager
NvError_UnsupportedResolution = _nvraw_v3.NvError_UnsupportedResolution
NvError_I2CCommunicationError = _nvraw_v3.NvError_I2CCommunicationError
NvError_IspConfigFileParseError = _nvraw_v3.NvError_IspConfigFileParseError
NvError_TooDark = _nvraw_v3.NvError_TooDark
NvError_InvalidIspConfigAttribute = _nvraw_v3.NvError_InvalidIspConfigAttribute
NvError_InvalidIspConfigAttributeElement = _nvraw_v3.NvError_InvalidIspConfigAttributeElement
NvError_IspConfigSyntaxError = _nvraw_v3.NvError_IspConfigSyntaxError
NvError_ImagerVersionNotSupported = _nvraw_v3.NvError_ImagerVersionNotSupported
NvError_CorruptedBuffer = _nvraw_v3.NvError_CorruptedBuffer
NvError_UnderConfident = _nvraw_v3.NvError_UnderConfident
NvError_TestApplicationFailed = _nvraw_v3.NvError_TestApplicationFailed
NvError_TestNoUserInput = _nvraw_v3.NvError_TestNoUserInput
NvError_TestCommandLineError = _nvraw_v3.NvError_TestCommandLineError
NvError_TestDataVerificationFailed = _nvraw_v3.NvError_TestDataVerificationFailed
NvError_TestServerFileReadFailed = _nvraw_v3.NvError_TestServerFileReadFailed
NvError_TestServerInvalidAddress = _nvraw_v3.NvError_TestServerInvalidAddress
NvError_TestServerMemoryLimitExceeded = _nvraw_v3.NvError_TestServerMemoryLimitExceeded
NvError_ColorFormatNotSupported = _nvraw_v3.NvError_ColorFormatNotSupported
NvError_TransportPortAlreadyExist = _nvraw_v3.NvError_TransportPortAlreadyExist
NvError_TransportMessageBoxEmpty = _nvraw_v3.NvError_TransportMessageBoxEmpty
NvError_TransportMessageBoxFull = _nvraw_v3.NvError_TransportMessageBoxFull
NvError_TransportConnectionFailed = _nvraw_v3.NvError_TransportConnectionFailed
NvError_TransportNotConnected = _nvraw_v3.NvError_TransportNotConnected
NvError_NandReadFailed = _nvraw_v3.NvError_NandReadFailed
NvError_NandProgramFailed = _nvraw_v3.NvError_NandProgramFailed
NvError_NandEraseFailed = _nvraw_v3.NvError_NandEraseFailed
NvError_NandCopyBackFailed = _nvraw_v3.NvError_NandCopyBackFailed
NvError_NandOperationFailed = _nvraw_v3.NvError_NandOperationFailed
NvError_NandBusy = _nvraw_v3.NvError_NandBusy
NvError_NandNotOpened = _nvraw_v3.NvError_NandNotOpened
NvError_NandAlreadyOpened = _nvraw_v3.NvError_NandAlreadyOpened
NvError_NandBadOperationRequest = _nvraw_v3.NvError_NandBadOperationRequest
NvError_NandCommandQueueError = _nvraw_v3.NvError_NandCommandQueueError
NvError_NandReadEccFailed = _nvraw_v3.NvError_NandReadEccFailed
NvError_NandFlashNotSupported = _nvraw_v3.NvError_NandFlashNotSupported
NvError_NandLockFailed = _nvraw_v3.NvError_NandLockFailed
NvError_NandErrorThresholdReached = _nvraw_v3.NvError_NandErrorThresholdReached
NvError_NandWriteFailed = _nvraw_v3.NvError_NandWriteFailed
NvError_NandBadBlock = _nvraw_v3.NvError_NandBadBlock
NvError_NandBadState = _nvraw_v3.NvError_NandBadState
NvError_NandBlockIsLocked = _nvraw_v3.NvError_NandBlockIsLocked
NvError_NandNoFreeBlock = _nvraw_v3.NvError_NandNoFreeBlock
NvError_NandTTFailed = _nvraw_v3.NvError_NandTTFailed
NvError_NandTLFailed = _nvraw_v3.NvError_NandTLFailed
NvError_NandTLNoBlockAssigned = _nvraw_v3.NvError_NandTLNoBlockAssigned
NvError_WinSysBadDisplay = _nvraw_v3.NvError_WinSysBadDisplay
NvError_WinSysNoDevice = _nvraw_v3.NvError_WinSysNoDevice
NvError_WinSysBadDrawable = _nvraw_v3.NvError_WinSysBadDrawable
NvError_BLServerFileReadFailed = _nvraw_v3.NvError_BLServerFileReadFailed
NvError_BLServerInvalidAddress = _nvraw_v3.NvError_BLServerInvalidAddress
NvError_BLServerInvalidElfFile = _nvraw_v3.NvError_BLServerInvalidElfFile
NvError_BLServerConnectionFailed = _nvraw_v3.NvError_BLServerConnectionFailed
NvError_BLServerMemoryLimitExceeded = _nvraw_v3.NvError_BLServerMemoryLimitExceeded
NvError_AudioMixerPinTypeNotSupported = _nvraw_v3.NvError_AudioMixerPinTypeNotSupported
NvError_AudioMixerDirectionNotSupported = _nvraw_v3.NvError_AudioMixerDirectionNotSupported
NvError_AudioMixerNoMorePinsAvailable = _nvraw_v3.NvError_AudioMixerNoMorePinsAvailable
NvError_AudioMixerBadPinNumber = _nvraw_v3.NvError_AudioMixerBadPinNumber
NvError_VideoEncResolutionNotSupported = _nvraw_v3.NvError_VideoEncResolutionNotSupported
NvError_JPEGEncHWError = _nvraw_v3.NvError_JPEGEncHWError
NvError_VideoDecRetainLock = _nvraw_v3.NvError_VideoDecRetainLock
NvError_VideoDecMataDataFound = _nvraw_v3.NvError_VideoDecMataDataFound
NvError_VideoDecFrameDecoded = _nvraw_v3.NvError_VideoDecFrameDecoded
NvError_VideoDecDecodedPartialFrame = _nvraw_v3.NvError_VideoDecDecodedPartialFrame
NvError_VideoDecInsufficientBitstream = _nvraw_v3.NvError_VideoDecInsufficientBitstream
NvError_VideoDecOutputSurfaceUnavailable = _nvraw_v3.NvError_VideoDecOutputSurfaceUnavailable
NvError_VideoDecUnsupportedStreamFormat = _nvraw_v3.NvError_VideoDecUnsupportedStreamFormat
NvError_VideoDecFrameDecodedPlusVideoDecEvent = _nvraw_v3.NvError_VideoDecFrameDecodedPlusVideoDecEvent
NvError_VideoDecFailed = _nvraw_v3.NvError_VideoDecFailed
NvError_VideoDecDecodingComplete = _nvraw_v3.NvError_VideoDecDecodingComplete
NvError_VideoDecProvideNextIPBuffer = _nvraw_v3.NvError_VideoDecProvideNextIPBuffer
NvError_VideoDecProvideCurrentIPBuffer = _nvraw_v3.NvError_VideoDecProvideCurrentIPBuffer
NvError_VideoDecBypassMoreWork = _nvraw_v3.NvError_VideoDecBypassMoreWork
NvError_PipeNotConnected = _nvraw_v3.NvError_PipeNotConnected
NvError_ReadQNotCreated = _nvraw_v3.NvError_ReadQNotCreated
NvError_ParserEndOfStream = _nvraw_v3.NvError_ParserEndOfStream
NvError_ParserFailedToGetData = _nvraw_v3.NvError_ParserFailedToGetData
NvError_InSufficientBufferSize = _nvraw_v3.NvError_InSufficientBufferSize
NvError_ParserReadFailure = _nvraw_v3.NvError_ParserReadFailure
NvError_ParserOpenFailure = _nvraw_v3.NvError_ParserOpenFailure
NvError_UnSupportedStream = _nvraw_v3.NvError_UnSupportedStream
NvError_ParserFailure = _nvraw_v3.NvError_ParserFailure
NvError_ParserHeaderDecodeNotComplete = _nvraw_v3.NvError_ParserHeaderDecodeNotComplete
NvError_ParserCloseFailure = _nvraw_v3.NvError_ParserCloseFailure
NvError_ParserMarkerHit = _nvraw_v3.NvError_ParserMarkerHit
NvError_ParserCorruptedStream = _nvraw_v3.NvError_ParserCorruptedStream
NvError_ParserDRMLicenseNotFound = _nvraw_v3.NvError_ParserDRMLicenseNotFound
NvError_ParserDRMFailure = _nvraw_v3.NvError_ParserDRMFailure
NvError_ParserSeekUnSupported = _nvraw_v3.NvError_ParserSeekUnSupported
NvError_ParserTrickModeUnSupported = _nvraw_v3.NvError_ParserTrickModeUnSupported
NvError_ParserCoreNotCreated = _nvraw_v3.NvError_ParserCoreNotCreated
NvError_UnSupported_VideoStream = _nvraw_v3.NvError_UnSupported_VideoStream
NvError_UnSupported_AudioStream = _nvraw_v3.NvError_UnSupported_AudioStream
NvError_ParserTruncatedFile = _nvraw_v3.NvError_ParserTruncatedFile
NvError_ParserOffsetsNotFound = _nvraw_v3.NvError_ParserOffsetsNotFound
NvError_WriterOpenFailure = _nvraw_v3.NvError_WriterOpenFailure
NvError_WriterUnsupportedStream = _nvraw_v3.NvError_WriterUnsupportedStream
NvError_WriterUnsupportedUserData = _nvraw_v3.NvError_WriterUnsupportedUserData
NvError_WriterFileSizeLimitExceeded = _nvraw_v3.NvError_WriterFileSizeLimitExceeded
NvError_WriterInsufficientMemory = _nvraw_v3.NvError_WriterInsufficientMemory
NvError_WriterFailure = _nvraw_v3.NvError_WriterFailure
NvError_WriterCloseFailure = _nvraw_v3.NvError_WriterCloseFailure
NvError_WriterInitFailure = _nvraw_v3.NvError_WriterInitFailure
NvError_WriterFileWriteLimitExceeded = _nvraw_v3.NvError_WriterFileWriteLimitExceeded
NvError_WriterTimeLimitExceeded = _nvraw_v3.NvError_WriterTimeLimitExceeded
NvError_ContentPipeNoData = _nvraw_v3.NvError_ContentPipeNoData
NvError_ContentPipeNoFreeBuffers = _nvraw_v3.NvError_ContentPipeNoFreeBuffers
NvError_ContentPipeSpareAreaInUse = _nvraw_v3.NvError_ContentPipeSpareAreaInUse
NvError_ContentPipeEndOfStream = _nvraw_v3.NvError_ContentPipeEndOfStream
NvError_ContentPipeNotReady = _nvraw_v3.NvError_ContentPipeNotReady
NvError_ContentPipeInNonCachingMode = _nvraw_v3.NvError_ContentPipeInNonCachingMode
NvError_ContentPipeInsufficientMemory = _nvraw_v3.NvError_ContentPipeInsufficientMemory
NvError_ContentPipeNotInvalidated = _nvraw_v3.NvError_ContentPipeNotInvalidated
NvError_UnSupportedMetadata = _nvraw_v3.NvError_UnSupportedMetadata
NvError_MetadataSuccess = _nvraw_v3.NvError_MetadataSuccess
NvError_MetadataFailure = _nvraw_v3.NvError_MetadataFailure
NvError_NewMetaDataAvailable = _nvraw_v3.NvError_NewMetaDataAvailable
NvError_RefURLAvailable = _nvraw_v3.NvError_RefURLAvailable
NvError_TrackListInvalidTrackIndex = _nvraw_v3.NvError_TrackListInvalidTrackIndex
NvError_TrackListError = _nvraw_v3.NvError_TrackListError
NvError_TrackListItemStillPlayingError = _nvraw_v3.NvError_TrackListItemStillPlayingError
NvError_TrackListNotPlaying = _nvraw_v3.NvError_TrackListNotPlaying
NvError_Nv3pUnrecoverableProtocol = _nvraw_v3.NvError_Nv3pUnrecoverableProtocol
NvError_Nv3pBadPacketType = _nvraw_v3.NvError_Nv3pBadPacketType
NvError_Nv3pPacketNacked = _nvraw_v3.NvError_Nv3pPacketNacked
NvError_Nv3pBadReceiveLength = _nvraw_v3.NvError_Nv3pBadReceiveLength
NvError_Nv3pBadReturnData = _nvraw_v3.NvError_Nv3pBadReturnData
NvError_AesClearSbkFailed = _nvraw_v3.NvError_AesClearSbkFailed
NvError_AesLockSskFailed = _nvraw_v3.NvError_AesLockSskFailed
NvError_AesDisableCryptoFailed = _nvraw_v3.NvError_AesDisableCryptoFailed
NvError_AesKeyUnWrapFailed = _nvraw_v3.NvError_AesKeyUnWrapFailed
NvError_AesPermissionDenied = _nvraw_v3.NvError_AesPermissionDenied
NvError_BlockDriverIllegalIoctl = _nvraw_v3.NvError_BlockDriverIllegalIoctl
NvError_BlockDriverOverlappedPartition = _nvraw_v3.NvError_BlockDriverOverlappedPartition
NvError_BlockDriverNoPartition = _nvraw_v3.NvError_BlockDriverNoPartition
NvError_BlockDriverIllegalPartId = _nvraw_v3.NvError_BlockDriverIllegalPartId
NvError_BlockDriverWriteVerifyFailed = _nvraw_v3.NvError_BlockDriverWriteVerifyFailed
NvError_NandBlockDriverEraseFailure = _nvraw_v3.NvError_NandBlockDriverEraseFailure
NvError_NandBlockDriverWriteFailure = _nvraw_v3.NvError_NandBlockDriverWriteFailure
NvError_NandBlockDriverReadFailure = _nvraw_v3.NvError_NandBlockDriverReadFailure
NvError_NandBlockDriverLockFailure = _nvraw_v3.NvError_NandBlockDriverLockFailure
NvError_NandRegionIllegalAddress = _nvraw_v3.NvError_NandRegionIllegalAddress
NvError_NandRegionTableOpFailure = _nvraw_v3.NvError_NandRegionTableOpFailure
NvError_NandBlockDriverMultiInterleave = _nvraw_v3.NvError_NandBlockDriverMultiInterleave
NvError_NandTagAreaSearchFailure = _nvraw_v3.NvError_NandTagAreaSearchFailure
NvError_EmmcBlockDriverLockNotSupported = _nvraw_v3.NvError_EmmcBlockDriverLockNotSupported
NvError_EmmcBlockDriverLockUnaligned = _nvraw_v3.NvError_EmmcBlockDriverLockUnaligned
NvError_EmmcBlockDriverIllegalStateRead = _nvraw_v3.NvError_EmmcBlockDriverIllegalStateRead
NvError_EmmcBlockDriverIllegalStateWrite = _nvraw_v3.NvError_EmmcBlockDriverIllegalStateWrite
NvError_EmmcCommandFailed = _nvraw_v3.NvError_EmmcCommandFailed
NvError_EmmcReadFailed = _nvraw_v3.NvError_EmmcReadFailed
NvError_EmmcWriteFailed = _nvraw_v3.NvError_EmmcWriteFailed
NvError_EmmcBlockDriverEraseFailure = _nvraw_v3.NvError_EmmcBlockDriverEraseFailure
NvError_EmmcBlockDriverIllegalAddress = _nvraw_v3.NvError_EmmcBlockDriverIllegalAddress
NvError_EmmcBlockDriverLockFailure = _nvraw_v3.NvError_EmmcBlockDriverLockFailure
NvError_EmmcBlockDriverBlockIsLocked = _nvraw_v3.NvError_EmmcBlockDriverBlockIsLocked
NvError_MipiHsiTxFifoEmpty = _nvraw_v3.NvError_MipiHsiTxFifoEmpty
NvError_MipiHsiRxFifoEmpty = _nvraw_v3.NvError_MipiHsiRxFifoEmpty
NvError_MipiHsiBusy = _nvraw_v3.NvError_MipiHsiBusy
NvError_MipiHsiHandleNotConfigured = _nvraw_v3.NvError_MipiHsiHandleNotConfigured
NvError_MipiHsiTransmitError = _nvraw_v3.NvError_MipiHsiTransmitError
NvError_MipiHsiReceiveError = _nvraw_v3.NvError_MipiHsiReceiveError
NvError_MipiHsiTransferIncomplete = _nvraw_v3.NvError_MipiHsiTransferIncomplete
NvError_SCCompileFail = _nvraw_v3.NvError_SCCompileFail
NvError_DrmFailure = _nvraw_v3.NvError_DrmFailure
NvError_DrmInvalidArg = _nvraw_v3.NvError_DrmInvalidArg
NvError_DrmOutOfMemory = _nvraw_v3.NvError_DrmOutOfMemory
NvError_DrmFileNotFound = _nvraw_v3.NvError_DrmFileNotFound
NvError_DrmBufferTooSmall = _nvraw_v3.NvError_DrmBufferTooSmall
NvError_DrmInvalidLicense = _nvraw_v3.NvError_DrmInvalidLicense
NvError_DrmLicenseExpired = _nvraw_v3.NvError_DrmLicenseExpired
NvError_DrmRightsNotAvailable = _nvraw_v3.NvError_DrmRightsNotAvailable
NvError_DrmLicenseNotFound = _nvraw_v3.NvError_DrmLicenseNotFound
NvError_DrmInvalidBindId = _nvraw_v3.NvError_DrmInvalidBindId
NvError_DrmVersionNotSupported = _nvraw_v3.NvError_DrmVersionNotSupported
NvError_DrmMeteringNotSupported = _nvraw_v3.NvError_DrmMeteringNotSupported
NvError_DrmDecryptionFailed = _nvraw_v3.NvError_DrmDecryptionFailed
NvError_SysUpdateInvalidBLVersion = _nvraw_v3.NvError_SysUpdateInvalidBLVersion
NvError_SysUpdateInvalidChecksum = _nvraw_v3.NvError_SysUpdateInvalidChecksum
NvError_SysUpdateBLUpdateNotAllowed = _nvraw_v3.NvError_SysUpdateBLUpdateNotAllowed
NvSuccess = _nvraw_v3.NvSuccess
NvError_Force32 = _nvraw_v3.NvError_Force32

def getErrorString(arg1):
    return _nvraw_v3.getErrorString(arg1)

def INvRawFileReaderV1Cast(*args):
    return _nvraw_v3.INvRawFileReaderV1Cast(*args)

def INvRawFrameReaderV1Cast(*args):
    return _nvraw_v3.INvRawFrameReaderV1Cast(*args)

def INvRawExposurePlaneReaderV1Cast(*args):
    return _nvraw_v3.INvRawExposurePlaneReaderV1Cast(*args)

def INvRawBaseHeaderReaderV1Cast(*args):
    return _nvraw_v3.INvRawBaseHeaderReaderV1Cast(*args)

def INvRawSensorInfoReaderV1Cast(*args):
    return _nvraw_v3.INvRawSensorInfoReaderV1Cast(*args)

def INvRawEmbeddedDataReaderV1Cast(*args):
    return _nvraw_v3.INvRawEmbeddedDataReaderV1Cast(*args)

def INvRawFileVersionReaderV1Cast(*args):
    return _nvraw_v3.INvRawFileVersionReaderV1Cast(*args)

def INvRawPlaneHeaderReaderV2Cast(*args):
    return _nvraw_v3.INvRawPlaneHeaderReaderV2Cast(*args)

def INvRawFrameHeaderReaderV1Cast(*args):
    return _nvraw_v3.INvRawFrameHeaderReaderV1Cast(*args)

def INvRawFrameDataReaderV1Cast(*args):
    return _nvraw_v3.INvRawFrameDataReaderV1Cast(*args)

def INvRawPixelDataReaderV1Cast(*args):
    return _nvraw_v3.INvRawPixelDataReaderV1Cast(*args)

def INvRawFileWriterCast(*args):
    return _nvraw_v3.INvRawFileWriterCast(*args)

def INvRawFrameWriterCast(*args):
    return _nvraw_v3.INvRawFrameWriterCast(*args)

def INvRawExposurePlaneWriterCast(*args):
    return _nvraw_v3.INvRawExposurePlaneWriterCast(*args)

def INvRawBaseHeaderWriterCast(*args):
    return _nvraw_v3.INvRawBaseHeaderWriterCast(*args)

def INvRawSensorInfoWriterCast(*args):
    return _nvraw_v3.INvRawSensorInfoWriterCast(*args)

def INvRawEmbeddedDataWriterCast(*args):
    return _nvraw_v3.INvRawEmbeddedDataWriterCast(*args)

def INvRawPlaneHeaderWriterCast(*args):
    return _nvraw_v3.INvRawPlaneHeaderWriterCast(*args)

def INvRawFrameHeaderWriterCast(*args):
    return _nvraw_v3.INvRawFrameHeaderWriterCast(*args)

def INvRawFrameDataWriterCast(*args):
    return _nvraw_v3.INvRawFrameDataWriterCast(*args)

def INvRawPixelDataWriterCast(*args):
    return _nvraw_v3.INvRawPixelDataWriterCast(*args)
class UUID(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    prefix = property(_nvraw_v3.UUID_prefix_get, _nvraw_v3.UUID_prefix_set)
    time_mid = property(_nvraw_v3.UUID_time_mid_get, _nvraw_v3.UUID_time_mid_set)
    time_hi_and_version = property(_nvraw_v3.UUID_time_hi_and_version_get, _nvraw_v3.UUID_time_hi_and_version_set)
    clock_seq = property(_nvraw_v3.UUID_clock_seq_get, _nvraw_v3.UUID_clock_seq_set)
    node = property(_nvraw_v3.UUID_node_get, _nvraw_v3.UUID_node_set)

    def __eq__(self, r):
        return _nvraw_v3.UUID___eq__(self, r)

    def __lt__(self, r):
        return _nvraw_v3.UUID___lt__(self, r)

    def __init__(self):
        _nvraw_v3.UUID_swiginit(self, _nvraw_v3.new_UUID())
    __swig_destroy__ = _nvraw_v3.delete_UUID

# Register UUID in _nvraw_v3:
_nvraw_v3.UUID_swigregister(UUID)
MAX_UUID_NAME_LENGTH = cvar.MAX_UUID_NAME_LENGTH

class NamedUUID(UUID):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _nvraw_v3.NamedUUID_swiginit(self, _nvraw_v3.new_NamedUUID(*args))

    def __eq__(self, compared):
        return _nvraw_v3.NamedUUID___eq__(self, compared)

    def __ne__(self, compared):
        return _nvraw_v3.NamedUUID___ne__(self, compared)

    def getName(self):
        return _nvraw_v3.NamedUUID_getName(self)
    __swig_destroy__ = _nvraw_v3.delete_NamedUUID

# Register NamedUUID in _nvraw_v3:
_nvraw_v3.NamedUUID_swigregister(NamedUUID)

class NvRawFileVersion(InterfaceProvider):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register NvRawFileVersion in _nvraw_v3:
_nvraw_v3.NvRawFileVersion_swigregister(NvRawFileVersion)

class INvRawFileVersionReaderV1(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawFileVersionReaderV1_id()

    def getMajor(self):
        return _nvraw_v3.INvRawFileVersionReaderV1_getMajor(self)

    def getMinor(self):
        return _nvraw_v3.INvRawFileVersionReaderV1_getMinor(self)

    def getPatch(self):
        return _nvraw_v3.INvRawFileVersionReaderV1_getPatch(self)

    def getDescription(self):
        return _nvraw_v3.INvRawFileVersionReaderV1_getDescription(self)

# Register INvRawFileVersionReaderV1 in _nvraw_v3:
_nvraw_v3.INvRawFileVersionReaderV1_swigregister(INvRawFileVersionReaderV1)
IID_NVRAWFILE_VERSION_READER_V1 = cvar.IID_NVRAWFILE_VERSION_READER_V1

def INvRawFileVersionReaderV1_id():
    return _nvraw_v3.INvRawFileVersionReaderV1_id()

class NvRawBaseHeader(InterfaceProvider):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register NvRawBaseHeader in _nvraw_v3:
_nvraw_v3.NvRawBaseHeader_swigregister(NvRawBaseHeader)

class INvRawBaseHeaderReaderV1(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawBaseHeaderReaderV1_id()

    def getFrameCount(self):
        return _nvraw_v3.INvRawBaseHeaderReaderV1_getFrameCount(self)

    def getPlaneCount(self):
        return _nvraw_v3.INvRawBaseHeaderReaderV1_getPlaneCount(self)

    def getWidth(self):
        return _nvraw_v3.INvRawBaseHeaderReaderV1_getWidth(self)

    def getHeight(self):
        return _nvraw_v3.INvRawBaseHeaderReaderV1_getHeight(self)

    def getEmbeddedDataLayout(self):
        return _nvraw_v3.INvRawBaseHeaderReaderV1_getEmbeddedDataLayout(self)

    def getEmbeddedLineCountTop(self):
        return _nvraw_v3.INvRawBaseHeaderReaderV1_getEmbeddedLineCountTop(self)

    def getEmbeddedLineCountBottom(self):
        return _nvraw_v3.INvRawBaseHeaderReaderV1_getEmbeddedLineCountBottom(self)

    def getBayerPhase(self):
        return _nvraw_v3.INvRawBaseHeaderReaderV1_getBayerPhase(self)

    def isPixelLittleEndian(self):
        return _nvraw_v3.INvRawBaseHeaderReaderV1_isPixelLittleEndian(self)

    def getTimeCreated(self):
        return _nvraw_v3.INvRawBaseHeaderReaderV1_getTimeCreated(self)

    def getTimeModified(self):
        return _nvraw_v3.INvRawBaseHeaderReaderV1_getTimeModified(self)

    def getClientName(self):
        return _nvraw_v3.INvRawBaseHeaderReaderV1_getClientName(self)

# Register INvRawBaseHeaderReaderV1 in _nvraw_v3:
_nvraw_v3.INvRawBaseHeaderReaderV1_swigregister(INvRawBaseHeaderReaderV1)
IID_NVRAW_BASE_HEADER_READER_V1 = cvar.IID_NVRAW_BASE_HEADER_READER_V1

def INvRawBaseHeaderReaderV1_id():
    return _nvraw_v3.INvRawBaseHeaderReaderV1_id()

class INvRawBaseHeaderWriter(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawBaseHeaderWriter_id()

    def setFrameCount(self, frameCount):
        return _nvraw_v3.INvRawBaseHeaderWriter_setFrameCount(self, frameCount)

    def setPlaneCount(self, planeCount):
        return _nvraw_v3.INvRawBaseHeaderWriter_setPlaneCount(self, planeCount)

    def setWidth(self, width):
        return _nvraw_v3.INvRawBaseHeaderWriter_setWidth(self, width)

    def setHeight(self, height):
        return _nvraw_v3.INvRawBaseHeaderWriter_setHeight(self, height)

    def setEmbeddedDataLayout(self, embeddedDataLayout):
        return _nvraw_v3.INvRawBaseHeaderWriter_setEmbeddedDataLayout(self, embeddedDataLayout)

    def setEmbeddedLineCountTop(self, embeddedLineCountTop):
        return _nvraw_v3.INvRawBaseHeaderWriter_setEmbeddedLineCountTop(self, embeddedLineCountTop)

    def setEmbeddedLineCountBottom(self, embeddedLineCountBottom):
        return _nvraw_v3.INvRawBaseHeaderWriter_setEmbeddedLineCountBottom(self, embeddedLineCountBottom)

    def setBayerPhase(self, bayerPhase):
        return _nvraw_v3.INvRawBaseHeaderWriter_setBayerPhase(self, bayerPhase)

    def isPixelLittleEndian(self, isPixelLittleEndian):
        return _nvraw_v3.INvRawBaseHeaderWriter_isPixelLittleEndian(self, isPixelLittleEndian)

    def setTimeCreated(self, timeCreated):
        return _nvraw_v3.INvRawBaseHeaderWriter_setTimeCreated(self, timeCreated)

    def setTimeModified(self, timeModified):
        return _nvraw_v3.INvRawBaseHeaderWriter_setTimeModified(self, timeModified)

    def setClientName(self, nvRawLibraryClient):
        return _nvraw_v3.INvRawBaseHeaderWriter_setClientName(self, nvRawLibraryClient)

# Register INvRawBaseHeaderWriter in _nvraw_v3:
_nvraw_v3.INvRawBaseHeaderWriter_swigregister(INvRawBaseHeaderWriter)
IID_NVRAW_BASE_HEADER_WRITER_V1 = cvar.IID_NVRAW_BASE_HEADER_WRITER_V1

def INvRawBaseHeaderWriter_id():
    return _nvraw_v3.INvRawBaseHeaderWriter_id()

class NvRawSensorInfo(InterfaceProvider):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register NvRawSensorInfo in _nvraw_v3:
_nvraw_v3.NvRawSensorInfo_swigregister(NvRawSensorInfo)

class INvRawSensorInfoReaderV1(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawSensorInfoReaderV1_id()

    def getSensor(self):
        return _nvraw_v3.INvRawSensorInfoReaderV1_getSensor(self)

    def getFuseId(self):
        return _nvraw_v3.INvRawSensorInfoReaderV1_getFuseId(self)

    def getModuleName(self):
        return _nvraw_v3.INvRawSensorInfoReaderV1_getModuleName(self)

    def getLensName(self):
        return _nvraw_v3.INvRawSensorInfoReaderV1_getLensName(self)

# Register INvRawSensorInfoReaderV1 in _nvraw_v3:
_nvraw_v3.INvRawSensorInfoReaderV1_swigregister(INvRawSensorInfoReaderV1)
IID_NVRAW_SENSORINFO_READER_V1 = cvar.IID_NVRAW_SENSORINFO_READER_V1

def INvRawSensorInfoReaderV1_id():
    return _nvraw_v3.INvRawSensorInfoReaderV1_id()

class INvRawSensorInfoWriter(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawSensorInfoWriter_id()

    def setSensor(self, sensor):
        return _nvraw_v3.INvRawSensorInfoWriter_setSensor(self, sensor)

    def setFuseId(self, fuse):
        return _nvraw_v3.INvRawSensorInfoWriter_setFuseId(self, fuse)

    def setModuleName(self, module):
        return _nvraw_v3.INvRawSensorInfoWriter_setModuleName(self, module)

    def setLensName(self, lens):
        return _nvraw_v3.INvRawSensorInfoWriter_setLensName(self, lens)

# Register INvRawSensorInfoWriter in _nvraw_v3:
_nvraw_v3.INvRawSensorInfoWriter_swigregister(INvRawSensorInfoWriter)
IID_NVRAW_SENSORINFO_WRITER_V1 = cvar.IID_NVRAW_SENSORINFO_WRITER_V1

def INvRawSensorInfoWriter_id():
    return _nvraw_v3.INvRawSensorInfoWriter_id()

class NvRawPlaneHeader(InterfaceProvider):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register NvRawPlaneHeader in _nvraw_v3:
_nvraw_v3.NvRawPlaneHeader_swigregister(NvRawPlaneHeader)

class INvRawPlaneHeaderReaderV1(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawPlaneHeaderReaderV1_id()

    def getPlaneNumber(self):
        return _nvraw_v3.INvRawPlaneHeaderReaderV1_getPlaneNumber(self)

    def getBitsPerSample(self):
        return _nvraw_v3.INvRawPlaneHeaderReaderV1_getBitsPerSample(self)

    def getPixelFormat(self):
        return _nvraw_v3.INvRawPlaneHeaderReaderV1_getPixelFormat(self)

    def isCombinedPlane(self):
        return _nvraw_v3.INvRawPlaneHeaderReaderV1_isCombinedPlane(self)

    def getCsiPixelBitDepth(self):
        return _nvraw_v3.INvRawPlaneHeaderReaderV1_getCsiPixelBitDepth(self)

    def getDynamicPixelBitDepth(self):
        return _nvraw_v3.INvRawPlaneHeaderReaderV1_getDynamicPixelBitDepth(self)

    def getLut(self, lut):
        return _nvraw_v3.INvRawPlaneHeaderReaderV1_getLut(self, lut)

    def getSensorModeType(self):
        return _nvraw_v3.INvRawPlaneHeaderReaderV1_getSensorModeType(self)

# Register INvRawPlaneHeaderReaderV1 in _nvraw_v3:
_nvraw_v3.INvRawPlaneHeaderReaderV1_swigregister(INvRawPlaneHeaderReaderV1)
IID_NVRAW_PLANE_HEADER_READER_V1 = cvar.IID_NVRAW_PLANE_HEADER_READER_V1

def INvRawPlaneHeaderReaderV1_id():
    return _nvraw_v3.INvRawPlaneHeaderReaderV1_id()

class INvRawPlaneHeaderReaderV2(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawPlaneHeaderReaderV2_id()

    def getPlaneNumber(self):
        return _nvraw_v3.INvRawPlaneHeaderReaderV2_getPlaneNumber(self)

    def getBitsPerSample(self):
        return _nvraw_v3.INvRawPlaneHeaderReaderV2_getBitsPerSample(self)

    def getPixelFormat(self):
        return _nvraw_v3.INvRawPlaneHeaderReaderV2_getPixelFormat(self)

    def isCombinedPlane(self):
        return _nvraw_v3.INvRawPlaneHeaderReaderV2_isCombinedPlane(self)

    def getCsiPixelBitDepth(self):
        return _nvraw_v3.INvRawPlaneHeaderReaderV2_getCsiPixelBitDepth(self)

    def getDynamicPixelBitDepth(self):
        return _nvraw_v3.INvRawPlaneHeaderReaderV2_getDynamicPixelBitDepth(self)

    def getLut(self, lut):
        return _nvraw_v3.INvRawPlaneHeaderReaderV2_getLut(self, lut)

    def getSensorModeType(self):
        return _nvraw_v3.INvRawPlaneHeaderReaderV2_getSensorModeType(self)

    def getPwlPoints(self, points):
        return _nvraw_v3.INvRawPlaneHeaderReaderV2_getPwlPoints(self, points)

# Register INvRawPlaneHeaderReaderV2 in _nvraw_v3:
_nvraw_v3.INvRawPlaneHeaderReaderV2_swigregister(INvRawPlaneHeaderReaderV2)
IID_NVRAW_PLANE_HEADER_READER_V2 = cvar.IID_NVRAW_PLANE_HEADER_READER_V2

def INvRawPlaneHeaderReaderV2_id():
    return _nvraw_v3.INvRawPlaneHeaderReaderV2_id()

class INvRawPlaneHeaderWriter(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawPlaneHeaderWriter_id()

    def setPlaneNumber(self, planeNumber):
        return _nvraw_v3.INvRawPlaneHeaderWriter_setPlaneNumber(self, planeNumber)

    def setBitsPerSample(self, bitsPerSample):
        return _nvraw_v3.INvRawPlaneHeaderWriter_setBitsPerSample(self, bitsPerSample)

    def setPixelFormat(self, pixelFormat):
        return _nvraw_v3.INvRawPlaneHeaderWriter_setPixelFormat(self, pixelFormat)

    def setCombinedPlane(self, bCombined):
        return _nvraw_v3.INvRawPlaneHeaderWriter_setCombinedPlane(self, bCombined)

    def setCsiPixelBitDepth(self, csiPixelBitDepth):
        return _nvraw_v3.INvRawPlaneHeaderWriter_setCsiPixelBitDepth(self, csiPixelBitDepth)

    def setDynamicPixelBitDepth(self, dynamicPixelBitDepth):
        return _nvraw_v3.INvRawPlaneHeaderWriter_setDynamicPixelBitDepth(self, dynamicPixelBitDepth)

    def setLut(self, lut):
        return _nvraw_v3.INvRawPlaneHeaderWriter_setLut(self, lut)

    def setSensorModeType(self, sensorModeType):
        return _nvraw_v3.INvRawPlaneHeaderWriter_setSensorModeType(self, sensorModeType)

    def setPwlPoints(self, points):
        return _nvraw_v3.INvRawPlaneHeaderWriter_setPwlPoints(self, points)

# Register INvRawPlaneHeaderWriter in _nvraw_v3:
_nvraw_v3.INvRawPlaneHeaderWriter_swigregister(INvRawPlaneHeaderWriter)
IID_NVRAW_PLANE_HEADER_WRITER_V1 = cvar.IID_NVRAW_PLANE_HEADER_WRITER_V1

def INvRawPlaneHeaderWriter_id():
    return _nvraw_v3.INvRawPlaneHeaderWriter_id()

class NvRawFrameHeader(InterfaceProvider):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register NvRawFrameHeader in _nvraw_v3:
_nvraw_v3.NvRawFrameHeader_swigregister(NvRawFrameHeader)

class INvRawFrameHeaderReaderV1(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawFrameHeaderReaderV1_id()

    def getFrameNumber(self):
        return _nvraw_v3.INvRawFrameHeaderReaderV1_getFrameNumber(self)

    def getFrameRate(self):
        return _nvraw_v3.INvRawFrameHeaderReaderV1_getFrameRate(self)

    def getSwFrameId(self):
        return _nvraw_v3.INvRawFrameHeaderReaderV1_getSwFrameId(self)

    def getHwFrameId(self):
        return _nvraw_v3.INvRawFrameHeaderReaderV1_getHwFrameId(self)

    def getSensorFrameId(self):
        return _nvraw_v3.INvRawFrameHeaderReaderV1_getSensorFrameId(self)

# Register INvRawFrameHeaderReaderV1 in _nvraw_v3:
_nvraw_v3.INvRawFrameHeaderReaderV1_swigregister(INvRawFrameHeaderReaderV1)
IID_NVRAW_FRAME_HEADER_READER_V1 = cvar.IID_NVRAW_FRAME_HEADER_READER_V1

def INvRawFrameHeaderReaderV1_id():
    return _nvraw_v3.INvRawFrameHeaderReaderV1_id()

class INvRawFrameHeaderWriter(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawFrameHeaderWriter_id()

    def setFrameNumber(self, frameNumber):
        return _nvraw_v3.INvRawFrameHeaderWriter_setFrameNumber(self, frameNumber)

    def setFrameRate(self, frameRate):
        return _nvraw_v3.INvRawFrameHeaderWriter_setFrameRate(self, frameRate)

    def setSwFrameId(self, swFrameId):
        return _nvraw_v3.INvRawFrameHeaderWriter_setSwFrameId(self, swFrameId)

    def setHwFrameId(self, hwFrameId):
        return _nvraw_v3.INvRawFrameHeaderWriter_setHwFrameId(self, hwFrameId)

    def setSensorFrameId(self, sensorFrameId):
        return _nvraw_v3.INvRawFrameHeaderWriter_setSensorFrameId(self, sensorFrameId)

# Register INvRawFrameHeaderWriter in _nvraw_v3:
_nvraw_v3.INvRawFrameHeaderWriter_swigregister(INvRawFrameHeaderWriter)
IID_NVRAW_FRAME_HEADER_WRITER_V1 = cvar.IID_NVRAW_FRAME_HEADER_WRITER_V1

def INvRawFrameHeaderWriter_id():
    return _nvraw_v3.INvRawFrameHeaderWriter_id()

class NvRawFrameData(InterfaceProvider):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register NvRawFrameData in _nvraw_v3:
_nvraw_v3.NvRawFrameData_swigregister(NvRawFrameData)

class INvRawFrameDataReaderV1(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawFrameDataReaderV1_id()

    def getFrameNumber(self):
        return _nvraw_v3.INvRawFrameDataReaderV1_getFrameNumber(self)

    def getPlaneNumber(self):
        return _nvraw_v3.INvRawFrameDataReaderV1_getPlaneNumber(self)

    def getExposureTime(self):
        return _nvraw_v3.INvRawFrameDataReaderV1_getExposureTime(self)

    def getSensorGain(self):
        return _nvraw_v3.INvRawFrameDataReaderV1_getSensorGain(self)

    def getSensorAwbGains(self, awbGains):
        return _nvraw_v3.INvRawFrameDataReaderV1_getSensorAwbGains(self, awbGains)

    def getIspDigitalGain(self):
        return _nvraw_v3.INvRawFrameDataReaderV1_getIspDigitalGain(self)

    def getAwbConvergeStatus(self):
        return _nvraw_v3.INvRawFrameDataReaderV1_getAwbConvergeStatus(self)

    def getConversionGain(self):
        return _nvraw_v3.INvRawFrameDataReaderV1_getConversionGain(self)

    def getIspAwbGains(self, awbGains):
        return _nvraw_v3.INvRawFrameDataReaderV1_getIspAwbGains(self, awbGains)

    def getFocusPosition(self):
        return _nvraw_v3.INvRawFrameDataReaderV1_getFocusPosition(self)

    def getApertureMotorStep(self):
        return _nvraw_v3.INvRawFrameDataReaderV1_getApertureMotorStep(self)

    def getApertureFNumber(self):
        return _nvraw_v3.INvRawFrameDataReaderV1_getApertureFNumber(self)

    def getApertureMotorSpeed(self):
        return _nvraw_v3.INvRawFrameDataReaderV1_getApertureMotorSpeed(self)

    def getApertureMotorStatus(self):
        return _nvraw_v3.INvRawFrameDataReaderV1_getApertureMotorStatus(self)

# Register INvRawFrameDataReaderV1 in _nvraw_v3:
_nvraw_v3.INvRawFrameDataReaderV1_swigregister(INvRawFrameDataReaderV1)
IID_NVRAW_FRAME_DATA_READER_V1 = cvar.IID_NVRAW_FRAME_DATA_READER_V1

def INvRawFrameDataReaderV1_id():
    return _nvraw_v3.INvRawFrameDataReaderV1_id()

class INvRawFrameDataWriter(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawFrameDataWriter_id()

    def setFrameNumber(self, frameNumber):
        return _nvraw_v3.INvRawFrameDataWriter_setFrameNumber(self, frameNumber)

    def setPlaneNumber(self, planeNumber):
        return _nvraw_v3.INvRawFrameDataWriter_setPlaneNumber(self, planeNumber)

    def setExposureTime(self, exposureTime):
        return _nvraw_v3.INvRawFrameDataWriter_setExposureTime(self, exposureTime)

    def setSensorGain(self, sensorGain):
        return _nvraw_v3.INvRawFrameDataWriter_setSensorGain(self, sensorGain)

    def setSensorAwbGains(self, awbGains):
        return _nvraw_v3.INvRawFrameDataWriter_setSensorAwbGains(self, awbGains)

    def setIspDigitalGain(self, ispDigitalGain):
        return _nvraw_v3.INvRawFrameDataWriter_setIspDigitalGain(self, ispDigitalGain)

    def setAwbConvergeStatus(self, awbState):
        return _nvraw_v3.INvRawFrameDataWriter_setAwbConvergeStatus(self, awbState)

    def setConversionGain(self, conversionGain):
        return _nvraw_v3.INvRawFrameDataWriter_setConversionGain(self, conversionGain)

    def setIspAwbGains(self, awbGains):
        return _nvraw_v3.INvRawFrameDataWriter_setIspAwbGains(self, awbGains)

    def setFocusPosition(self, focusPosition):
        return _nvraw_v3.INvRawFrameDataWriter_setFocusPosition(self, focusPosition)

    def setApertureMotorStep(self, motorStep):
        return _nvraw_v3.INvRawFrameDataWriter_setApertureMotorStep(self, motorStep)

    def setApertureFNumber(self, fNumber):
        return _nvraw_v3.INvRawFrameDataWriter_setApertureFNumber(self, fNumber)

    def setApertureMotorSpeed(self, motorSpeed):
        return _nvraw_v3.INvRawFrameDataWriter_setApertureMotorSpeed(self, motorSpeed)

    def setApertureMotorStatus(self, motorStatus):
        return _nvraw_v3.INvRawFrameDataWriter_setApertureMotorStatus(self, motorStatus)

# Register INvRawFrameDataWriter in _nvraw_v3:
_nvraw_v3.INvRawFrameDataWriter_swigregister(INvRawFrameDataWriter)
IID_NVRAW_FRAME_DATA_WRITER_V1 = cvar.IID_NVRAW_FRAME_DATA_WRITER_V1

def INvRawFrameDataWriter_id():
    return _nvraw_v3.INvRawFrameDataWriter_id()

class NvRawPixelData(InterfaceProvider):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register NvRawPixelData in _nvraw_v3:
_nvraw_v3.NvRawPixelData_swigregister(NvRawPixelData)

class INvRawPixelDataReaderV1(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawPixelDataReaderV1_id()

    def getFrameNumber(self):
        return _nvraw_v3.INvRawPixelDataReaderV1_getFrameNumber(self)

    def getPlaneNumber(self):
        return _nvraw_v3.INvRawPixelDataReaderV1_getPlaneNumber(self)

    def getSize(self):
        return _nvraw_v3.INvRawPixelDataReaderV1_getSize(self)

    def getPixelData(self):
        return _nvraw_v3.INvRawPixelDataReaderV1_getPixelData(self)

# Register INvRawPixelDataReaderV1 in _nvraw_v3:
_nvraw_v3.INvRawPixelDataReaderV1_swigregister(INvRawPixelDataReaderV1)
IID_NVRAW_PIXEL_DATA_READER_V1 = cvar.IID_NVRAW_PIXEL_DATA_READER_V1

def INvRawPixelDataReaderV1_id():
    return _nvraw_v3.INvRawPixelDataReaderV1_id()

class INvRawPixelDataWriter(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawPixelDataWriter_id()

    def setFrameNumber(self, frameNumber):
        return _nvraw_v3.INvRawPixelDataWriter_setFrameNumber(self, frameNumber)

    def setPlaneNumber(self, planeNumber):
        return _nvraw_v3.INvRawPixelDataWriter_setPlaneNumber(self, planeNumber)

    def setPixelData(self, data):
        return _nvraw_v3.INvRawPixelDataWriter_setPixelData(self, data)

# Register INvRawPixelDataWriter in _nvraw_v3:
_nvraw_v3.INvRawPixelDataWriter_swigregister(INvRawPixelDataWriter)
IID_NVRAW_PIXEL_DATA_WRITER_V1 = cvar.IID_NVRAW_PIXEL_DATA_WRITER_V1

def INvRawPixelDataWriter_id():
    return _nvraw_v3.INvRawPixelDataWriter_id()

class NvRawEmbeddedData(InterfaceProvider):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register NvRawEmbeddedData in _nvraw_v3:
_nvraw_v3.NvRawEmbeddedData_swigregister(NvRawEmbeddedData)

class INvRawEmbeddedDataReaderV1(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawEmbeddedDataReaderV1_id()

    def getFrameNumber(self):
        return _nvraw_v3.INvRawEmbeddedDataReaderV1_getFrameNumber(self)

    def getPlaneNumber(self):
        return _nvraw_v3.INvRawEmbeddedDataReaderV1_getPlaneNumber(self)

    def getEmbeddedDataType(self):
        return _nvraw_v3.INvRawEmbeddedDataReaderV1_getEmbeddedDataType(self)

    def getSize(self):
        return _nvraw_v3.INvRawEmbeddedDataReaderV1_getSize(self)

    def getEmbeddedData(self):
        return _nvraw_v3.INvRawEmbeddedDataReaderV1_getEmbeddedData(self)

# Register INvRawEmbeddedDataReaderV1 in _nvraw_v3:
_nvraw_v3.INvRawEmbeddedDataReaderV1_swigregister(INvRawEmbeddedDataReaderV1)
IID_NVRAW_EMBEDDED_DATA_READER_V1 = cvar.IID_NVRAW_EMBEDDED_DATA_READER_V1

def INvRawEmbeddedDataReaderV1_id():
    return _nvraw_v3.INvRawEmbeddedDataReaderV1_id()

class INvRawEmbeddedDataWriter(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawEmbeddedDataWriter_id()

    def setFrameNumber(self, frameNumber):
        return _nvraw_v3.INvRawEmbeddedDataWriter_setFrameNumber(self, frameNumber)

    def setPlaneNumber(self, planeNumber):
        return _nvraw_v3.INvRawEmbeddedDataWriter_setPlaneNumber(self, planeNumber)

    def setEmbeddedDataType(self, embeddedDataType):
        return _nvraw_v3.INvRawEmbeddedDataWriter_setEmbeddedDataType(self, embeddedDataType)

    def setEmbeddedData(self, data):
        return _nvraw_v3.INvRawEmbeddedDataWriter_setEmbeddedData(self, data)

# Register INvRawEmbeddedDataWriter in _nvraw_v3:
_nvraw_v3.INvRawEmbeddedDataWriter_swigregister(INvRawEmbeddedDataWriter)
IID_NVRAW_EMBEDDED_DATA_WRITER_V1 = cvar.IID_NVRAW_EMBEDDED_DATA_WRITER_V1

def INvRawEmbeddedDataWriter_id():
    return _nvraw_v3.INvRawEmbeddedDataWriter_id()

class NvRawDynamicRangeData(InterfaceProvider):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register NvRawDynamicRangeData in _nvraw_v3:
_nvraw_v3.NvRawDynamicRangeData_swigregister(NvRawDynamicRangeData)

class INvRawDynamicRangeDataReaderV1(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawDynamicRangeDataReaderV1_id()

    def getFrameNumber(self):
        return _nvraw_v3.INvRawDynamicRangeDataReaderV1_getFrameNumber(self)

    def getPlaneNumber(self):
        return _nvraw_v3.INvRawDynamicRangeDataReaderV1_getPlaneNumber(self)

    def getCombinedPlaneMask(self):
        return _nvraw_v3.INvRawDynamicRangeDataReaderV1_getCombinedPlaneMask(self)

    def getType(self):
        return _nvraw_v3.INvRawDynamicRangeDataReaderV1_getType(self)

    def getExposureInfoReaders(self, exposureInfos):
        return _nvraw_v3.INvRawDynamicRangeDataReaderV1_getExposureInfoReaders(self, exposureInfos)

    def getTypeReader(self, type):
        return _nvraw_v3.INvRawDynamicRangeDataReaderV1_getTypeReader(self, type)

# Register INvRawDynamicRangeDataReaderV1 in _nvraw_v3:
_nvraw_v3.INvRawDynamicRangeDataReaderV1_swigregister(INvRawDynamicRangeDataReaderV1)
IID_NVRAW_DYNAMIC_RANGE_READER_V1 = cvar.IID_NVRAW_DYNAMIC_RANGE_READER_V1

def INvRawDynamicRangeDataReaderV1_id():
    return _nvraw_v3.INvRawDynamicRangeDataReaderV1_id()

class INvRawDynamicRangeDataReaderV2(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawDynamicRangeDataReaderV2_id()

    def getFrameNumber(self):
        return _nvraw_v3.INvRawDynamicRangeDataReaderV2_getFrameNumber(self)

    def getPlaneNumber(self):
        return _nvraw_v3.INvRawDynamicRangeDataReaderV2_getPlaneNumber(self)

    def getCombinedPlaneMask(self):
        return _nvraw_v3.INvRawDynamicRangeDataReaderV2_getCombinedPlaneMask(self)

    def getType(self):
        return _nvraw_v3.INvRawDynamicRangeDataReaderV2_getType(self)

    def getExposureInfoReaders(self, exposureInfos):
        return _nvraw_v3.INvRawDynamicRangeDataReaderV2_getExposureInfoReaders(self, exposureInfos)

    def getTypeReader(self, type):
        return _nvraw_v3.INvRawDynamicRangeDataReaderV2_getTypeReader(self, type)

# Register INvRawDynamicRangeDataReaderV2 in _nvraw_v3:
_nvraw_v3.INvRawDynamicRangeDataReaderV2_swigregister(INvRawDynamicRangeDataReaderV2)
IID_NVRAW_DYNAMIC_RANGE_READER_V2 = cvar.IID_NVRAW_DYNAMIC_RANGE_READER_V2

def INvRawDynamicRangeDataReaderV2_id():
    return _nvraw_v3.INvRawDynamicRangeDataReaderV2_id()

class INvRawDynamicRangeDataWriter(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawDynamicRangeDataWriter_id()

    def setFrameNumber(self, frameNumber):
        return _nvraw_v3.INvRawDynamicRangeDataWriter_setFrameNumber(self, frameNumber)

    def setPlaneNumber(self, planeNumber):
        return _nvraw_v3.INvRawDynamicRangeDataWriter_setPlaneNumber(self, planeNumber)

    def setCombinedPlaneMask(self, combinedPlaneMask):
        return _nvraw_v3.INvRawDynamicRangeDataWriter_setCombinedPlaneMask(self, combinedPlaneMask)

    def setType(self, drType):
        return _nvraw_v3.INvRawDynamicRangeDataWriter_setType(self, drType)

    def getExposureInfoWriters(self, exposureInfos, numWriters):
        return _nvraw_v3.INvRawDynamicRangeDataWriter_getExposureInfoWriters(self, exposureInfos, numWriters)

    def getWriter(self, type):
        return _nvraw_v3.INvRawDynamicRangeDataWriter_getWriter(self, type)

# Register INvRawDynamicRangeDataWriter in _nvraw_v3:
_nvraw_v3.INvRawDynamicRangeDataWriter_swigregister(INvRawDynamicRangeDataWriter)
IID_NVRAW_DYNAMIC_RANGE_WRITER = cvar.IID_NVRAW_DYNAMIC_RANGE_WRITER

def INvRawDynamicRangeDataWriter_id():
    return _nvraw_v3.INvRawDynamicRangeDataWriter_id()

class INvRawDynamicRangeDolReaderV1(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawDynamicRangeDolReaderV1_id()

    def getLogicalWidth(self):
        return _nvraw_v3.INvRawDynamicRangeDolReaderV1_getLogicalWidth(self)

    def getLogicalHeight(self):
        return _nvraw_v3.INvRawDynamicRangeDolReaderV1_getLogicalHeight(self)

    def getNumExposures(self):
        return _nvraw_v3.INvRawDynamicRangeDolReaderV1_getNumExposures(self)

    def getNumOfIgnoredLines(self):
        return _nvraw_v3.INvRawDynamicRangeDolReaderV1_getNumOfIgnoredLines(self)

    def getNumOfLinesOffset(self, numOfLinesOffset):
        return _nvraw_v3.INvRawDynamicRangeDolReaderV1_getNumOfLinesOffset(self, numOfLinesOffset)

    def getNumOfIgnoredPixels(self):
        return _nvraw_v3.INvRawDynamicRangeDolReaderV1_getNumOfIgnoredPixels(self)

    def getNumOfLeftMarginPixels(self):
        return _nvraw_v3.INvRawDynamicRangeDolReaderV1_getNumOfLeftMarginPixels(self)

    def getNumOfRightMarginPixels(self):
        return _nvraw_v3.INvRawDynamicRangeDolReaderV1_getNumOfRightMarginPixels(self)

# Register INvRawDynamicRangeDolReaderV1 in _nvraw_v3:
_nvraw_v3.INvRawDynamicRangeDolReaderV1_swigregister(INvRawDynamicRangeDolReaderV1)
IID_NVRAW_DYNAMIC_RANGE_DOL_READER_V1 = cvar.IID_NVRAW_DYNAMIC_RANGE_DOL_READER_V1

def INvRawDynamicRangeDolReaderV1_id():
    return _nvraw_v3.INvRawDynamicRangeDolReaderV1_id()

class INvRawDynamicRangeDolWriter(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawDynamicRangeDolWriter_id()

    def setLogicalWidth(self, logicalWidth):
        return _nvraw_v3.INvRawDynamicRangeDolWriter_setLogicalWidth(self, logicalWidth)

    def setLogicalHeight(self, logicalHeight):
        return _nvraw_v3.INvRawDynamicRangeDolWriter_setLogicalHeight(self, logicalHeight)

    def setNumExposures(self, numExposures):
        return _nvraw_v3.INvRawDynamicRangeDolWriter_setNumExposures(self, numExposures)

    def setNumOfIgnoredLines(self, numOfIgnoredLines):
        return _nvraw_v3.INvRawDynamicRangeDolWriter_setNumOfIgnoredLines(self, numOfIgnoredLines)

    def setNumOfLinesOffset(self, numOfLinesOffset):
        return _nvraw_v3.INvRawDynamicRangeDolWriter_setNumOfLinesOffset(self, numOfLinesOffset)

    def setNumOfIgnoredPixels(self, numOfIgnoredLines):
        return _nvraw_v3.INvRawDynamicRangeDolWriter_setNumOfIgnoredPixels(self, numOfIgnoredLines)

    def setNumOfLeftMarginPixels(self, leftMarginPixels):
        return _nvraw_v3.INvRawDynamicRangeDolWriter_setNumOfLeftMarginPixels(self, leftMarginPixels)

    def setNumOfRightMarginPixels(self, rightMarginPixels):
        return _nvraw_v3.INvRawDynamicRangeDolWriter_setNumOfRightMarginPixels(self, rightMarginPixels)

# Register INvRawDynamicRangeDolWriter in _nvraw_v3:
_nvraw_v3.INvRawDynamicRangeDolWriter_swigregister(INvRawDynamicRangeDolWriter)
IID_NVRAW_DYNAMIC_RANGE_DOL_WRITER = cvar.IID_NVRAW_DYNAMIC_RANGE_DOL_WRITER

def INvRawDynamicRangeDolWriter_id():
    return _nvraw_v3.INvRawDynamicRangeDolWriter_id()

class INvRawDynamicRangeExposureInfoReaderV1(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawDynamicRangeExposureInfoReaderV1_id()

    def getExposureTime(self):
        return _nvraw_v3.INvRawDynamicRangeExposureInfoReaderV1_getExposureTime(self)

    def getSensorGain(self):
        return _nvraw_v3.INvRawDynamicRangeExposureInfoReaderV1_getSensorGain(self)

    def getDigitalGain(self):
        return _nvraw_v3.INvRawDynamicRangeExposureInfoReaderV1_getDigitalGain(self)

    def getAwbGains(self, awbGains):
        return _nvraw_v3.INvRawDynamicRangeExposureInfoReaderV1_getAwbGains(self, awbGains)

    def getConversionGain(self):
        return _nvraw_v3.INvRawDynamicRangeExposureInfoReaderV1_getConversionGain(self)

# Register INvRawDynamicRangeExposureInfoReaderV1 in _nvraw_v3:
_nvraw_v3.INvRawDynamicRangeExposureInfoReaderV1_swigregister(INvRawDynamicRangeExposureInfoReaderV1)
IID_NVRAW_DYNAMIC_RANGE_EXPOSURE_INFO_READER_V1 = cvar.IID_NVRAW_DYNAMIC_RANGE_EXPOSURE_INFO_READER_V1

def INvRawDynamicRangeExposureInfoReaderV1_id():
    return _nvraw_v3.INvRawDynamicRangeExposureInfoReaderV1_id()

class INvRawDynamicRangeExposureInfoWriter(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawDynamicRangeExposureInfoWriter_id()

    def setExposureTime(self, exposureTime):
        return _nvraw_v3.INvRawDynamicRangeExposureInfoWriter_setExposureTime(self, exposureTime)

    def setSensorGain(self, sensorGain):
        return _nvraw_v3.INvRawDynamicRangeExposureInfoWriter_setSensorGain(self, sensorGain)

    def setDigitalGain(self, digitalGain):
        return _nvraw_v3.INvRawDynamicRangeExposureInfoWriter_setDigitalGain(self, digitalGain)

    def setAwbGains(self, awbGains):
        return _nvraw_v3.INvRawDynamicRangeExposureInfoWriter_setAwbGains(self, awbGains)

    def setConversionGain(self, conversionGain):
        return _nvraw_v3.INvRawDynamicRangeExposureInfoWriter_setConversionGain(self, conversionGain)

# Register INvRawDynamicRangeExposureInfoWriter in _nvraw_v3:
_nvraw_v3.INvRawDynamicRangeExposureInfoWriter_swigregister(INvRawDynamicRangeExposureInfoWriter)
IID_NVRAW_DYNAMIC_RANGE_EXPOSURE_INFO_WRITER = cvar.IID_NVRAW_DYNAMIC_RANGE_EXPOSURE_INFO_WRITER

def INvRawDynamicRangeExposureInfoWriter_id():
    return _nvraw_v3.INvRawDynamicRangeExposureInfoWriter_id()

class NvRawExposurePlane(InterfaceProvider):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register NvRawExposurePlane in _nvraw_v3:
_nvraw_v3.NvRawExposurePlane_swigregister(NvRawExposurePlane)

class INvRawExposurePlaneReaderV1(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawExposurePlaneReaderV1_id()

    def getFrameData(self):
        return _nvraw_v3.INvRawExposurePlaneReaderV1_getFrameData(self)

    def getPixelData(self):
        return _nvraw_v3.INvRawExposurePlaneReaderV1_getPixelData(self)

    def getEmbeddedData(self):
        return _nvraw_v3.INvRawExposurePlaneReaderV1_getEmbeddedData(self)

    def getDynamicRangeData(self):
        return _nvraw_v3.INvRawExposurePlaneReaderV1_getDynamicRangeData(self)

# Register INvRawExposurePlaneReaderV1 in _nvraw_v3:
_nvraw_v3.INvRawExposurePlaneReaderV1_swigregister(INvRawExposurePlaneReaderV1)
IID_NVRAW_EXPOSURE_PLANE_READER_V1 = cvar.IID_NVRAW_EXPOSURE_PLANE_READER_V1

def INvRawExposurePlaneReaderV1_id():
    return _nvraw_v3.INvRawExposurePlaneReaderV1_id()

class INvRawExposurePlaneWriter(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawExposurePlaneWriter_id()

    def createFrameData(self, error=None):
        return _nvraw_v3.INvRawExposurePlaneWriter_createFrameData(self, error)

    def createPixelData(self, error=None):
        return _nvraw_v3.INvRawExposurePlaneWriter_createPixelData(self, error)

    def createEmbeddedData(self, error=None):
        return _nvraw_v3.INvRawExposurePlaneWriter_createEmbeddedData(self, error)

    def createDynamicRangeData(self, error=None):
        return _nvraw_v3.INvRawExposurePlaneWriter_createDynamicRangeData(self, error)

# Register INvRawExposurePlaneWriter in _nvraw_v3:
_nvraw_v3.INvRawExposurePlaneWriter_swigregister(INvRawExposurePlaneWriter)
IID_NVRAW_EXPOSURE_PLANE_WRITER_V1 = cvar.IID_NVRAW_EXPOSURE_PLANE_WRITER_V1

def INvRawExposurePlaneWriter_id():
    return _nvraw_v3.INvRawExposurePlaneWriter_id()

class NvRawFrame(InterfaceProvider, Destructable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

# Register NvRawFrame in _nvraw_v3:
_nvraw_v3.NvRawFrame_swigregister(NvRawFrame)

class INvRawFrameReaderV1(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawFrameReaderV1_id()

    def getFrameHeader(self):
        return _nvraw_v3.INvRawFrameReaderV1_getFrameHeader(self)

    def getExposurePlanes(self, planes):
        return _nvraw_v3.INvRawFrameReaderV1_getExposurePlanes(self, planes)

# Register INvRawFrameReaderV1 in _nvraw_v3:
_nvraw_v3.INvRawFrameReaderV1_swigregister(INvRawFrameReaderV1)
IID_NVRAW_FRAME_READER_V1 = cvar.IID_NVRAW_FRAME_READER_V1

def INvRawFrameReaderV1_id():
    return _nvraw_v3.INvRawFrameReaderV1_id()

class INvRawFrameWriter(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawFrameWriter_id()

    def createFrameHeader(self, error=None):
        return _nvraw_v3.INvRawFrameWriter_createFrameHeader(self, error)

    def createExposurePlanes(self, planes, numPlanes):
        return _nvraw_v3.INvRawFrameWriter_createExposurePlanes(self, planes, numPlanes)

# Register INvRawFrameWriter in _nvraw_v3:
_nvraw_v3.INvRawFrameWriter_swigregister(INvRawFrameWriter)
IID_NVRAW_FRAME_WRITER_V1 = cvar.IID_NVRAW_FRAME_WRITER_V1

def INvRawFrameWriter_id():
    return _nvraw_v3.INvRawFrameWriter_id()

class NvRawFileV3(InterfaceProvider, Destructable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def openForReading(*args):
        return _nvraw_v3.NvRawFileV3_openForReading(*args)

    @staticmethod
    def openForWriting(*args):
        return _nvraw_v3.NvRawFileV3_openForWriting(*args)

    @staticmethod
    def getLibraryVersion():
        return _nvraw_v3.NvRawFileV3_getLibraryVersion()

    def close(self):
        return _nvraw_v3.NvRawFileV3_close(self)

# Register NvRawFileV3 in _nvraw_v3:
_nvraw_v3.NvRawFileV3_swigregister(NvRawFileV3)

def NvRawFileV3_openForReading(*args):
    return _nvraw_v3.NvRawFileV3_openForReading(*args)

def NvRawFileV3_openForWriting(*args):
    return _nvraw_v3.NvRawFileV3_openForWriting(*args)

def NvRawFileV3_getLibraryVersion():
    return _nvraw_v3.NvRawFileV3_getLibraryVersion()

class INvRawFileReaderV1(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawFileReaderV1_id()

    def getNvRawFileVersion(self):
        return _nvraw_v3.INvRawFileReaderV1_getNvRawFileVersion(self)

    def getBaseHeader(self):
        return _nvraw_v3.INvRawFileReaderV1_getBaseHeader(self)

    def getSensorInfo(self):
        return _nvraw_v3.INvRawFileReaderV1_getSensorInfo(self)

    def getPlaneHeaders(self, planeHeaders):
        return _nvraw_v3.INvRawFileReaderV1_getPlaneHeaders(self, planeHeaders)

    def getNextFrames(self, frames, numFrames):
        return _nvraw_v3.INvRawFileReaderV1_getNextFrames(self, frames, numFrames)

# Register INvRawFileReaderV1 in _nvraw_v3:
_nvraw_v3.INvRawFileReaderV1_swigregister(INvRawFileReaderV1)
IID_NVRAWFILE_READER_V1 = cvar.IID_NVRAWFILE_READER_V1

def INvRawFileReaderV1_id():
    return _nvraw_v3.INvRawFileReaderV1_id()

class INvRawFileWriter(Interface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def id():
        return _nvraw_v3.INvRawFileWriter_id()

    def createBaseHeader(self, error=None):
        return _nvraw_v3.INvRawFileWriter_createBaseHeader(self, error)

    def createSensorInfo(self, error=None):
        return _nvraw_v3.INvRawFileWriter_createSensorInfo(self, error)

    def createPlaneHeaders(self, planeHeaders, numPlanes):
        return _nvraw_v3.INvRawFileWriter_createPlaneHeaders(self, planeHeaders, numPlanes)

    def createFrames(self, frames, numFrames):
        return _nvraw_v3.INvRawFileWriter_createFrames(self, frames, numFrames)

    def setValidationState(self, enable):
        return _nvraw_v3.INvRawFileWriter_setValidationState(self, enable)

    def flush(self):
        return _nvraw_v3.INvRawFileWriter_flush(self)

# Register INvRawFileWriter in _nvraw_v3:
_nvraw_v3.INvRawFileWriter_swigregister(INvRawFileWriter)
IID_NVRAWFILE_WRITER_V1 = cvar.IID_NVRAWFILE_WRITER_V1

def INvRawFileWriter_id():
    return _nvraw_v3.INvRawFileWriter_id()

class Size(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    width = property(_nvraw_v3.Size_width_get, _nvraw_v3.Size_width_set)
    height = property(_nvraw_v3.Size_height_get, _nvraw_v3.Size_height_set)

    def __init__(self, *args):
        _nvraw_v3.Size_swiginit(self, _nvraw_v3.new_Size(*args))
    __swig_destroy__ = _nvraw_v3.delete_Size

# Register Size in _nvraw_v3:
_nvraw_v3.Size_swigregister(Size)


def pixelFormatToString(format):
    return _nvraw_v3.pixelFormatToString(format)

def NvRawFile_decompress_direct(pLut, height, width, pInData, csiBitDepth, pOutData, pixelFormat):
    return _nvraw_v3.NvRawFile_decompress_direct(pLut, height, width, pInData, csiBitDepth, pOutData, pixelFormat)

def isRgbIrBayerPattern(bayerOrder):
    return _nvraw_v3.isRgbIrBayerPattern(bayerOrder)
class Uint8Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    INVALID_INDEX = _nvraw_v3.Uint8Vector_INVALID_INDEX

    def __init__(self, initialAlloc=32, growthIncrement=32):
        _nvraw_v3.Uint8Vector_swiginit(self, _nvraw_v3.new_Uint8Vector(initialAlloc, growthIncrement))
    __swig_destroy__ = _nvraw_v3.delete_Uint8Vector

    def copyFrom(self, _from):
        return _nvraw_v3.Uint8Vector_copyFrom(self, _from)

    def clear(self):
        return _nvraw_v3.Uint8Vector_clear(self)

    def push_back(self, element):
        return _nvraw_v3.Uint8Vector_push_back(self, element)

    def append(self, *args):
        return _nvraw_v3.Uint8Vector_append(self, *args)

    def insert(self, element, index):
        return _nvraw_v3.Uint8Vector_insert(self, element, index)

    def insertSorted(self, element):
        return _nvraw_v3.Uint8Vector_insertSorted(self, element)

    def remove(self, element):
        return _nvraw_v3.Uint8Vector_remove(self, element)

    def removeIndex(self, index):
        return _nvraw_v3.Uint8Vector_removeIndex(self, index)

    def invalidIndex(self):
        return _nvraw_v3.Uint8Vector_invalidIndex(self)

    def find(self, element):
        return _nvraw_v3.Uint8Vector_find(self, element)

    def contains(self, element):
        return _nvraw_v3.Uint8Vector_contains(self, element)

    def size(self):
        return _nvraw_v3.Uint8Vector_size(self)

    def capacity(self):
        return _nvraw_v3.Uint8Vector_capacity(self)

    def reserve(self, numElements):
        return _nvraw_v3.Uint8Vector_reserve(self, numElements)

    def resize(self, numElements):
        return _nvraw_v3.Uint8Vector_resize(self, numElements)

    def resizePreserve(self, numElements):
        return _nvraw_v3.Uint8Vector_resizePreserve(self, numElements)

    def copyFromArrayBuffer(self, srcPointer, numElements):
        return _nvraw_v3.Uint8Vector_copyFromArrayBuffer(self, srcPointer, numElements)

    def getData(self, *args):
        return _nvraw_v3.Uint8Vector_getData(self, *args)

    def get(self, *args):
        return _nvraw_v3.Uint8Vector_get(self, *args)

    def sort(self):
        return _nvraw_v3.Uint8Vector_sort(self)

    def __getitem__(self, i):
        return _nvraw_v3.Uint8Vector___getitem__(self, i)

    def copyFromPythonArray(self, arrObj):
        return _nvraw_v3.Uint8Vector_copyFromPythonArray(self, arrObj)

# Register Uint8Vector in _nvraw_v3:
_nvraw_v3.Uint8Vector_swigregister(Uint8Vector)

class Uint16Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    INVALID_INDEX = _nvraw_v3.Uint16Vector_INVALID_INDEX

    def __init__(self, initialAlloc=32, growthIncrement=32):
        _nvraw_v3.Uint16Vector_swiginit(self, _nvraw_v3.new_Uint16Vector(initialAlloc, growthIncrement))
    __swig_destroy__ = _nvraw_v3.delete_Uint16Vector

    def copyFrom(self, _from):
        return _nvraw_v3.Uint16Vector_copyFrom(self, _from)

    def clear(self):
        return _nvraw_v3.Uint16Vector_clear(self)

    def push_back(self, element):
        return _nvraw_v3.Uint16Vector_push_back(self, element)

    def append(self, *args):
        return _nvraw_v3.Uint16Vector_append(self, *args)

    def insert(self, element, index):
        return _nvraw_v3.Uint16Vector_insert(self, element, index)

    def insertSorted(self, element):
        return _nvraw_v3.Uint16Vector_insertSorted(self, element)

    def remove(self, element):
        return _nvraw_v3.Uint16Vector_remove(self, element)

    def removeIndex(self, index):
        return _nvraw_v3.Uint16Vector_removeIndex(self, index)

    def invalidIndex(self):
        return _nvraw_v3.Uint16Vector_invalidIndex(self)

    def find(self, element):
        return _nvraw_v3.Uint16Vector_find(self, element)

    def contains(self, element):
        return _nvraw_v3.Uint16Vector_contains(self, element)

    def size(self):
        return _nvraw_v3.Uint16Vector_size(self)

    def capacity(self):
        return _nvraw_v3.Uint16Vector_capacity(self)

    def reserve(self, numElements):
        return _nvraw_v3.Uint16Vector_reserve(self, numElements)

    def resize(self, numElements):
        return _nvraw_v3.Uint16Vector_resize(self, numElements)

    def resizePreserve(self, numElements):
        return _nvraw_v3.Uint16Vector_resizePreserve(self, numElements)

    def copyFromArrayBuffer(self, srcPointer, numElements):
        return _nvraw_v3.Uint16Vector_copyFromArrayBuffer(self, srcPointer, numElements)

    def getData(self, *args):
        return _nvraw_v3.Uint16Vector_getData(self, *args)

    def get(self, *args):
        return _nvraw_v3.Uint16Vector_get(self, *args)

    def sort(self):
        return _nvraw_v3.Uint16Vector_sort(self)

    def __getitem__(self, i):
        return _nvraw_v3.Uint16Vector___getitem__(self, i)

    def copyFromPythonArray(self, arrObj):
        return _nvraw_v3.Uint16Vector_copyFromPythonArray(self, arrObj)

# Register Uint16Vector in _nvraw_v3:
_nvraw_v3.Uint16Vector_swigregister(Uint16Vector)

class Int16Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    INVALID_INDEX = _nvraw_v3.Int16Vector_INVALID_INDEX

    def __init__(self, initialAlloc=32, growthIncrement=32):
        _nvraw_v3.Int16Vector_swiginit(self, _nvraw_v3.new_Int16Vector(initialAlloc, growthIncrement))
    __swig_destroy__ = _nvraw_v3.delete_Int16Vector

    def copyFrom(self, _from):
        return _nvraw_v3.Int16Vector_copyFrom(self, _from)

    def clear(self):
        return _nvraw_v3.Int16Vector_clear(self)

    def push_back(self, element):
        return _nvraw_v3.Int16Vector_push_back(self, element)

    def append(self, *args):
        return _nvraw_v3.Int16Vector_append(self, *args)

    def insert(self, element, index):
        return _nvraw_v3.Int16Vector_insert(self, element, index)

    def insertSorted(self, element):
        return _nvraw_v3.Int16Vector_insertSorted(self, element)

    def remove(self, element):
        return _nvraw_v3.Int16Vector_remove(self, element)

    def removeIndex(self, index):
        return _nvraw_v3.Int16Vector_removeIndex(self, index)

    def invalidIndex(self):
        return _nvraw_v3.Int16Vector_invalidIndex(self)

    def find(self, element):
        return _nvraw_v3.Int16Vector_find(self, element)

    def contains(self, element):
        return _nvraw_v3.Int16Vector_contains(self, element)

    def size(self):
        return _nvraw_v3.Int16Vector_size(self)

    def capacity(self):
        return _nvraw_v3.Int16Vector_capacity(self)

    def reserve(self, numElements):
        return _nvraw_v3.Int16Vector_reserve(self, numElements)

    def resize(self, numElements):
        return _nvraw_v3.Int16Vector_resize(self, numElements)

    def resizePreserve(self, numElements):
        return _nvraw_v3.Int16Vector_resizePreserve(self, numElements)

    def copyFromArrayBuffer(self, srcPointer, numElements):
        return _nvraw_v3.Int16Vector_copyFromArrayBuffer(self, srcPointer, numElements)

    def getData(self, *args):
        return _nvraw_v3.Int16Vector_getData(self, *args)

    def get(self, *args):
        return _nvraw_v3.Int16Vector_get(self, *args)

    def sort(self):
        return _nvraw_v3.Int16Vector_sort(self)

    def __getitem__(self, i):
        return _nvraw_v3.Int16Vector___getitem__(self, i)

    def copyFromPythonArray(self, arrObj):
        return _nvraw_v3.Int16Vector_copyFromPythonArray(self, arrObj)

# Register Int16Vector in _nvraw_v3:
_nvraw_v3.Int16Vector_swigregister(Int16Vector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    INVALID_INDEX = _nvraw_v3.FloatVector_INVALID_INDEX

    def __init__(self, initialAlloc=32, growthIncrement=32):
        _nvraw_v3.FloatVector_swiginit(self, _nvraw_v3.new_FloatVector(initialAlloc, growthIncrement))
    __swig_destroy__ = _nvraw_v3.delete_FloatVector

    def copyFrom(self, _from):
        return _nvraw_v3.FloatVector_copyFrom(self, _from)

    def clear(self):
        return _nvraw_v3.FloatVector_clear(self)

    def push_back(self, element):
        return _nvraw_v3.FloatVector_push_back(self, element)

    def append(self, *args):
        return _nvraw_v3.FloatVector_append(self, *args)

    def insert(self, element, index):
        return _nvraw_v3.FloatVector_insert(self, element, index)

    def insertSorted(self, element):
        return _nvraw_v3.FloatVector_insertSorted(self, element)

    def remove(self, element):
        return _nvraw_v3.FloatVector_remove(self, element)

    def removeIndex(self, index):
        return _nvraw_v3.FloatVector_removeIndex(self, index)

    def invalidIndex(self):
        return _nvraw_v3.FloatVector_invalidIndex(self)

    def find(self, element):
        return _nvraw_v3.FloatVector_find(self, element)

    def contains(self, element):
        return _nvraw_v3.FloatVector_contains(self, element)

    def size(self):
        return _nvraw_v3.FloatVector_size(self)

    def capacity(self):
        return _nvraw_v3.FloatVector_capacity(self)

    def reserve(self, numElements):
        return _nvraw_v3.FloatVector_reserve(self, numElements)

    def resize(self, numElements):
        return _nvraw_v3.FloatVector_resize(self, numElements)

    def resizePreserve(self, numElements):
        return _nvraw_v3.FloatVector_resizePreserve(self, numElements)

    def copyFromArrayBuffer(self, srcPointer, numElements):
        return _nvraw_v3.FloatVector_copyFromArrayBuffer(self, srcPointer, numElements)

    def getData(self, *args):
        return _nvraw_v3.FloatVector_getData(self, *args)

    def get(self, *args):
        return _nvraw_v3.FloatVector_get(self, *args)

    def sort(self):
        return _nvraw_v3.FloatVector_sort(self)

    def __getitem__(self, i):
        return _nvraw_v3.FloatVector___getitem__(self, i)

    def copyFromPythonArray(self, arrObj):
        return _nvraw_v3.FloatVector_copyFromPythonArray(self, arrObj)

# Register FloatVector in _nvraw_v3:
_nvraw_v3.FloatVector_swigregister(FloatVector)

class PointFloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    INVALID_INDEX = _nvraw_v3.PointFloatVector_INVALID_INDEX

    def __init__(self, initialAlloc=32, growthIncrement=32):
        _nvraw_v3.PointFloatVector_swiginit(self, _nvraw_v3.new_PointFloatVector(initialAlloc, growthIncrement))
    __swig_destroy__ = _nvraw_v3.delete_PointFloatVector

    def copyFrom(self, _from):
        return _nvraw_v3.PointFloatVector_copyFrom(self, _from)

    def clear(self):
        return _nvraw_v3.PointFloatVector_clear(self)

    def push_back(self, element):
        return _nvraw_v3.PointFloatVector_push_back(self, element)

    def append(self, *args):
        return _nvraw_v3.PointFloatVector_append(self, *args)

    def insert(self, element, index):
        return _nvraw_v3.PointFloatVector_insert(self, element, index)

    def insertSorted(self, element):
        return _nvraw_v3.PointFloatVector_insertSorted(self, element)

    def remove(self, element):
        return _nvraw_v3.PointFloatVector_remove(self, element)

    def removeIndex(self, index):
        return _nvraw_v3.PointFloatVector_removeIndex(self, index)

    def invalidIndex(self):
        return _nvraw_v3.PointFloatVector_invalidIndex(self)

    def find(self, element):
        return _nvraw_v3.PointFloatVector_find(self, element)

    def contains(self, element):
        return _nvraw_v3.PointFloatVector_contains(self, element)

    def size(self):
        return _nvraw_v3.PointFloatVector_size(self)

    def capacity(self):
        return _nvraw_v3.PointFloatVector_capacity(self)

    def reserve(self, numElements):
        return _nvraw_v3.PointFloatVector_reserve(self, numElements)

    def resize(self, numElements):
        return _nvraw_v3.PointFloatVector_resize(self, numElements)

    def resizePreserve(self, numElements):
        return _nvraw_v3.PointFloatVector_resizePreserve(self, numElements)

    def copyFromArrayBuffer(self, srcPointer, numElements):
        return _nvraw_v3.PointFloatVector_copyFromArrayBuffer(self, srcPointer, numElements)

    def getData(self, *args):
        return _nvraw_v3.PointFloatVector_getData(self, *args)

    def get(self, *args):
        return _nvraw_v3.PointFloatVector_get(self, *args)

    def sort(self):
        return _nvraw_v3.PointFloatVector_sort(self)

    def __getitem__(self, i):
        return _nvraw_v3.PointFloatVector___getitem__(self, i)

    def copyFromPythonArray(self, arrObj):
        return _nvraw_v3.PointFloatVector_copyFromPythonArray(self, arrObj)

# Register PointFloatVector in _nvraw_v3:
_nvraw_v3.PointFloatVector_swigregister(PointFloatVector)

class NvRawFrameUniqueObj(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def reset(self, obj=None):
        return _nvraw_v3.NvRawFrameUniqueObj_reset(self, obj)

    def release(self):
        return _nvraw_v3.NvRawFrameUniqueObj_release(self)

    def __init__(self, *args):
        _nvraw_v3.NvRawFrameUniqueObj_swiginit(self, _nvraw_v3.new_NvRawFrameUniqueObj(*args))
    __swig_destroy__ = _nvraw_v3.delete_NvRawFrameUniqueObj

    def __ref__(self):
        return _nvraw_v3.NvRawFrameUniqueObj___ref__(self)

    def get(self):
        return _nvraw_v3.NvRawFrameUniqueObj_get(self)

    def __and__(self):
        return _nvraw_v3.NvRawFrameUniqueObj___and__(self)

    def getAddr(self, *args):
        return _nvraw_v3.NvRawFrameUniqueObj_getAddr(self, *args)

    def __nonzero__(self):
        return _nvraw_v3.NvRawFrameUniqueObj___nonzero__(self)
    __bool__ = __nonzero__



# Register NvRawFrameUniqueObj in _nvraw_v3:
_nvraw_v3.NvRawFrameUniqueObj_swigregister(NvRawFrameUniqueObj)

class NvRawPlaneHeaderVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    INVALID_INDEX = _nvraw_v3.NvRawPlaneHeaderVector_INVALID_INDEX

    def __init__(self, initialAlloc=32, growthIncrement=32):
        _nvraw_v3.NvRawPlaneHeaderVector_swiginit(self, _nvraw_v3.new_NvRawPlaneHeaderVector(initialAlloc, growthIncrement))
    __swig_destroy__ = _nvraw_v3.delete_NvRawPlaneHeaderVector

    def copyFrom(self, _from):
        return _nvraw_v3.NvRawPlaneHeaderVector_copyFrom(self, _from)

    def clear(self):
        return _nvraw_v3.NvRawPlaneHeaderVector_clear(self)

    def push_back(self, element):
        return _nvraw_v3.NvRawPlaneHeaderVector_push_back(self, element)

    def append(self, *args):
        return _nvraw_v3.NvRawPlaneHeaderVector_append(self, *args)

    def insert(self, element, index):
        return _nvraw_v3.NvRawPlaneHeaderVector_insert(self, element, index)

    def insertSorted(self, element):
        return _nvraw_v3.NvRawPlaneHeaderVector_insertSorted(self, element)

    def remove(self, element):
        return _nvraw_v3.NvRawPlaneHeaderVector_remove(self, element)

    def removeIndex(self, index):
        return _nvraw_v3.NvRawPlaneHeaderVector_removeIndex(self, index)

    def invalidIndex(self):
        return _nvraw_v3.NvRawPlaneHeaderVector_invalidIndex(self)

    def find(self, element):
        return _nvraw_v3.NvRawPlaneHeaderVector_find(self, element)

    def contains(self, element):
        return _nvraw_v3.NvRawPlaneHeaderVector_contains(self, element)

    def size(self):
        return _nvraw_v3.NvRawPlaneHeaderVector_size(self)

    def capacity(self):
        return _nvraw_v3.NvRawPlaneHeaderVector_capacity(self)

    def reserve(self, numElements):
        return _nvraw_v3.NvRawPlaneHeaderVector_reserve(self, numElements)

    def resize(self, numElements):
        return _nvraw_v3.NvRawPlaneHeaderVector_resize(self, numElements)

    def resizePreserve(self, numElements):
        return _nvraw_v3.NvRawPlaneHeaderVector_resizePreserve(self, numElements)

    def copyFromArrayBuffer(self, srcPointer, numElements):
        return _nvraw_v3.NvRawPlaneHeaderVector_copyFromArrayBuffer(self, srcPointer, numElements)

    def getData(self, *args):
        return _nvraw_v3.NvRawPlaneHeaderVector_getData(self, *args)

    def get(self, *args):
        return _nvraw_v3.NvRawPlaneHeaderVector_get(self, *args)

    def sort(self):
        return _nvraw_v3.NvRawPlaneHeaderVector_sort(self)

    def __getitem__(self, i):
        return _nvraw_v3.NvRawPlaneHeaderVector___getitem__(self, i)

    def copyFromPythonArray(self, arrObj):
        return _nvraw_v3.NvRawPlaneHeaderVector_copyFromPythonArray(self, arrObj)

# Register NvRawPlaneHeaderVector in _nvraw_v3:
_nvraw_v3.NvRawPlaneHeaderVector_swigregister(NvRawPlaneHeaderVector)

class NvRawExposurePlaneVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    INVALID_INDEX = _nvraw_v3.NvRawExposurePlaneVector_INVALID_INDEX

    def __init__(self, initialAlloc=32, growthIncrement=32):
        _nvraw_v3.NvRawExposurePlaneVector_swiginit(self, _nvraw_v3.new_NvRawExposurePlaneVector(initialAlloc, growthIncrement))
    __swig_destroy__ = _nvraw_v3.delete_NvRawExposurePlaneVector

    def copyFrom(self, _from):
        return _nvraw_v3.NvRawExposurePlaneVector_copyFrom(self, _from)

    def clear(self):
        return _nvraw_v3.NvRawExposurePlaneVector_clear(self)

    def push_back(self, element):
        return _nvraw_v3.NvRawExposurePlaneVector_push_back(self, element)

    def append(self, *args):
        return _nvraw_v3.NvRawExposurePlaneVector_append(self, *args)

    def insert(self, element, index):
        return _nvraw_v3.NvRawExposurePlaneVector_insert(self, element, index)

    def insertSorted(self, element):
        return _nvraw_v3.NvRawExposurePlaneVector_insertSorted(self, element)

    def remove(self, element):
        return _nvraw_v3.NvRawExposurePlaneVector_remove(self, element)

    def removeIndex(self, index):
        return _nvraw_v3.NvRawExposurePlaneVector_removeIndex(self, index)

    def invalidIndex(self):
        return _nvraw_v3.NvRawExposurePlaneVector_invalidIndex(self)

    def find(self, element):
        return _nvraw_v3.NvRawExposurePlaneVector_find(self, element)

    def contains(self, element):
        return _nvraw_v3.NvRawExposurePlaneVector_contains(self, element)

    def size(self):
        return _nvraw_v3.NvRawExposurePlaneVector_size(self)

    def capacity(self):
        return _nvraw_v3.NvRawExposurePlaneVector_capacity(self)

    def reserve(self, numElements):
        return _nvraw_v3.NvRawExposurePlaneVector_reserve(self, numElements)

    def resize(self, numElements):
        return _nvraw_v3.NvRawExposurePlaneVector_resize(self, numElements)

    def resizePreserve(self, numElements):
        return _nvraw_v3.NvRawExposurePlaneVector_resizePreserve(self, numElements)

    def copyFromArrayBuffer(self, srcPointer, numElements):
        return _nvraw_v3.NvRawExposurePlaneVector_copyFromArrayBuffer(self, srcPointer, numElements)

    def getData(self, *args):
        return _nvraw_v3.NvRawExposurePlaneVector_getData(self, *args)

    def get(self, *args):
        return _nvraw_v3.NvRawExposurePlaneVector_get(self, *args)

    def sort(self):
        return _nvraw_v3.NvRawExposurePlaneVector_sort(self)

    def __getitem__(self, i):
        return _nvraw_v3.NvRawExposurePlaneVector___getitem__(self, i)

    def copyFromPythonArray(self, arrObj):
        return _nvraw_v3.NvRawExposurePlaneVector_copyFromPythonArray(self, arrObj)

# Register NvRawExposurePlaneVector in _nvraw_v3:
_nvraw_v3.NvRawExposurePlaneVector_swigregister(NvRawExposurePlaneVector)

class NvRawFileUniqueObj(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def reset(self, obj=None):
        return _nvraw_v3.NvRawFileUniqueObj_reset(self, obj)

    def release(self):
        return _nvraw_v3.NvRawFileUniqueObj_release(self)

    def __init__(self, *args):
        _nvraw_v3.NvRawFileUniqueObj_swiginit(self, _nvraw_v3.new_NvRawFileUniqueObj(*args))
    __swig_destroy__ = _nvraw_v3.delete_NvRawFileUniqueObj

    def __ref__(self):
        return _nvraw_v3.NvRawFileUniqueObj___ref__(self)

    def get(self):
        return _nvraw_v3.NvRawFileUniqueObj_get(self)

    def __and__(self):
        return _nvraw_v3.NvRawFileUniqueObj___and__(self)

    def getAddr(self, *args):
        return _nvraw_v3.NvRawFileUniqueObj_getAddr(self, *args)

    def __nonzero__(self):
        return _nvraw_v3.NvRawFileUniqueObj___nonzero__(self)
    __bool__ = __nonzero__



# Register NvRawFileUniqueObj in _nvraw_v3:
_nvraw_v3.NvRawFileUniqueObj_swigregister(NvRawFileUniqueObj)

class ConstNvRawFrameUniqueObj(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def reset(self, obj=None):
        return _nvraw_v3.ConstNvRawFrameUniqueObj_reset(self, obj)

    def release(self):
        return _nvraw_v3.ConstNvRawFrameUniqueObj_release(self)

    def __init__(self, *args):
        _nvraw_v3.ConstNvRawFrameUniqueObj_swiginit(self, _nvraw_v3.new_ConstNvRawFrameUniqueObj(*args))
    __swig_destroy__ = _nvraw_v3.delete_ConstNvRawFrameUniqueObj

    def __ref__(self):
        return _nvraw_v3.ConstNvRawFrameUniqueObj___ref__(self)

    def get(self):
        return _nvraw_v3.ConstNvRawFrameUniqueObj_get(self)

    def __and__(self):
        return _nvraw_v3.ConstNvRawFrameUniqueObj___and__(self)

    def getAddr(self, *args):
        return _nvraw_v3.ConstNvRawFrameUniqueObj_getAddr(self, *args)

    def __nonzero__(self):
        return _nvraw_v3.ConstNvRawFrameUniqueObj___nonzero__(self)
    __bool__ = __nonzero__



# Register ConstNvRawFrameUniqueObj in _nvraw_v3:
_nvraw_v3.ConstNvRawFrameUniqueObj_swigregister(ConstNvRawFrameUniqueObj)

class ConstNvRawPlaneHeaderVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    INVALID_INDEX = _nvraw_v3.ConstNvRawPlaneHeaderVector_INVALID_INDEX

    def __init__(self, initialAlloc=32, growthIncrement=32):
        _nvraw_v3.ConstNvRawPlaneHeaderVector_swiginit(self, _nvraw_v3.new_ConstNvRawPlaneHeaderVector(initialAlloc, growthIncrement))
    __swig_destroy__ = _nvraw_v3.delete_ConstNvRawPlaneHeaderVector

    def copyFrom(self, _from):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_copyFrom(self, _from)

    def clear(self):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_clear(self)

    def push_back(self, element):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_push_back(self, element)

    def append(self, *args):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_append(self, *args)

    def insert(self, element, index):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_insert(self, element, index)

    def insertSorted(self, element):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_insertSorted(self, element)

    def remove(self, element):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_remove(self, element)

    def removeIndex(self, index):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_removeIndex(self, index)

    def invalidIndex(self):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_invalidIndex(self)

    def find(self, element):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_find(self, element)

    def contains(self, element):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_contains(self, element)

    def size(self):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_size(self)

    def capacity(self):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_capacity(self)

    def reserve(self, numElements):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_reserve(self, numElements)

    def resize(self, numElements):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_resize(self, numElements)

    def resizePreserve(self, numElements):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_resizePreserve(self, numElements)

    def copyFromArrayBuffer(self, srcPointer, numElements):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_copyFromArrayBuffer(self, srcPointer, numElements)

    def getData(self, *args):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_getData(self, *args)

    def get(self, *args):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_get(self, *args)

    def sort(self):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_sort(self)

    def __getitem__(self, i):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector___getitem__(self, i)

    def copyFromPythonArray(self, arrObj):
        return _nvraw_v3.ConstNvRawPlaneHeaderVector_copyFromPythonArray(self, arrObj)

# Register ConstNvRawPlaneHeaderVector in _nvraw_v3:
_nvraw_v3.ConstNvRawPlaneHeaderVector_swigregister(ConstNvRawPlaneHeaderVector)

class ConstNvRawExposurePlaneVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    INVALID_INDEX = _nvraw_v3.ConstNvRawExposurePlaneVector_INVALID_INDEX

    def __init__(self, initialAlloc=32, growthIncrement=32):
        _nvraw_v3.ConstNvRawExposurePlaneVector_swiginit(self, _nvraw_v3.new_ConstNvRawExposurePlaneVector(initialAlloc, growthIncrement))
    __swig_destroy__ = _nvraw_v3.delete_ConstNvRawExposurePlaneVector

    def copyFrom(self, _from):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_copyFrom(self, _from)

    def clear(self):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_clear(self)

    def push_back(self, element):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_push_back(self, element)

    def append(self, *args):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_append(self, *args)

    def insert(self, element, index):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_insert(self, element, index)

    def insertSorted(self, element):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_insertSorted(self, element)

    def remove(self, element):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_remove(self, element)

    def removeIndex(self, index):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_removeIndex(self, index)

    def invalidIndex(self):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_invalidIndex(self)

    def find(self, element):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_find(self, element)

    def contains(self, element):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_contains(self, element)

    def size(self):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_size(self)

    def capacity(self):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_capacity(self)

    def reserve(self, numElements):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_reserve(self, numElements)

    def resize(self, numElements):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_resize(self, numElements)

    def resizePreserve(self, numElements):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_resizePreserve(self, numElements)

    def copyFromArrayBuffer(self, srcPointer, numElements):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_copyFromArrayBuffer(self, srcPointer, numElements)

    def getData(self, *args):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_getData(self, *args)

    def get(self, *args):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_get(self, *args)

    def sort(self):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_sort(self)

    def __getitem__(self, i):
        return _nvraw_v3.ConstNvRawExposurePlaneVector___getitem__(self, i)

    def copyFromPythonArray(self, arrObj):
        return _nvraw_v3.ConstNvRawExposurePlaneVector_copyFromPythonArray(self, arrObj)

# Register ConstNvRawExposurePlaneVector in _nvraw_v3:
_nvraw_v3.ConstNvRawExposurePlaneVector_swigregister(ConstNvRawExposurePlaneVector)

class NvRawFrameUniqueObjVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getAddr(self):
        return _nvraw_v3.NvRawFrameUniqueObjVector_getAddr(self)

    def getValueAtIndex(self, i):
        return _nvraw_v3.NvRawFrameUniqueObjVector_getValueAtIndex(self, i)

    def size(self):
        return _nvraw_v3.NvRawFrameUniqueObjVector_size(self)

    def __init__(self):
        _nvraw_v3.NvRawFrameUniqueObjVector_swiginit(self, _nvraw_v3.new_NvRawFrameUniqueObjVector())
    __swig_destroy__ = _nvraw_v3.delete_NvRawFrameUniqueObjVector

# Register NvRawFrameUniqueObjVector in _nvraw_v3:
_nvraw_v3.NvRawFrameUniqueObjVector_swigregister(NvRawFrameUniqueObjVector)

class ConstNvRawFrameUniqueObjVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getAddr(self):
        return _nvraw_v3.ConstNvRawFrameUniqueObjVector_getAddr(self)

    def getValueAtIndex(self, i):
        return _nvraw_v3.ConstNvRawFrameUniqueObjVector_getValueAtIndex(self, i)

    def size(self):
        return _nvraw_v3.ConstNvRawFrameUniqueObjVector_size(self)

    def __init__(self):
        _nvraw_v3.ConstNvRawFrameUniqueObjVector_swiginit(self, _nvraw_v3.new_ConstNvRawFrameUniqueObjVector())
    __swig_destroy__ = _nvraw_v3.delete_ConstNvRawFrameUniqueObjVector

# Register ConstNvRawFrameUniqueObjVector in _nvraw_v3:
_nvraw_v3.ConstNvRawFrameUniqueObjVector_swigregister(ConstNvRawFrameUniqueObjVector)


def computePwlTable(points, bps, dynamicBitsPerSample, normalizedOutput, table):
    return _nvraw_v3.computePwlTable(points, bps, dynamicBitsPerSample, normalizedOutput, table)

def convertIrBayerToStandardBayerUint16(width, height, bayerOrder, pixels, bayer):
    return _nvraw_v3.convertIrBayerToStandardBayerUint16(width, height, bayerOrder, pixels, bayer)

def convertIrBayerToIrOnlyUint16(width, height, bayerOrder, pixels, irSamples):
    return _nvraw_v3.convertIrBayerToIrOnlyUint16(width, height, bayerOrder, pixels, irSamples)

def subtractClippedIrUint16(width, height, pixels, widthIr, heightIr, irSamples, irClipping):
    return _nvraw_v3.subtractClippedIrUint16(width, height, pixels, widthIr, heightIr, irSamples, irClipping)

def subtractIrUint16(width, height, pixels, widthIr, heightIr, irSamples):
    return _nvraw_v3.subtractIrUint16(width, height, pixels, widthIr, heightIr, irSamples)

def convertIrBayerToStandardBayerInt16(width, height, bayerOrder, pixels, bayer):
    return _nvraw_v3.convertIrBayerToStandardBayerInt16(width, height, bayerOrder, pixels, bayer)

def convertIrBayerToIrOnlyInt16(width, height, bayerOrder, pixels, irSamples):
    return _nvraw_v3.convertIrBayerToIrOnlyInt16(width, height, bayerOrder, pixels, irSamples)

def subtractClippedIrInt16(width, height, pixels, widthIr, heightIr, irSamples, irClipping):
    return _nvraw_v3.subtractClippedIrInt16(width, height, pixels, widthIr, heightIr, irSamples, irClipping)

def subtractIrInt16(width, height, pixels, widthIr, heightIr, irSamples):
    return _nvraw_v3.subtractIrInt16(width, height, pixels, widthIr, heightIr, irSamples)


